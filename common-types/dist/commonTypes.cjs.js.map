{"version":3,"file":"commonTypes.cjs.js","mappings":"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","sources":["webpack://@tkey/common-types/webpack/bootstrap","webpack://@tkey/common-types/webpack/runtime/compat get default export","webpack://@tkey/common-types/webpack/runtime/define property getters","webpack://@tkey/common-types/webpack/runtime/hasOwnProperty shorthand","webpack://@tkey/common-types/webpack/runtime/make namespace object","webpack://@tkey/common-types/external commonjs2 \"@toruslabs/eccrypto\"","webpack://@tkey/common-types/external commonjs2 \"bn.js\"","webpack://@tkey/common-types/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@tkey/common-types/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@tkey/common-types/external commonjs2 \"elliptic\"","webpack://@tkey/common-types/external commonjs2 \"serialize-error\"","webpack://@tkey/common-types/external commonjs2 \"web3-utils\"","webpack://@tkey/common-types/./src/utils.ts","webpack://@tkey/common-types/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@tkey/common-types/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@tkey/common-types/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@tkey/common-types/./src/base/Point.ts","webpack://@tkey/common-types/./src/base/BNUtils.ts","webpack://@tkey/common-types/external commonjs2 \"@babel/runtime/helpers/assertThisInitialized\"","webpack://@tkey/common-types/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@tkey/common-types/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@tkey/common-types/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@tkey/common-types/external commonjs2 \"ts-custom-error\"","webpack://@tkey/common-types/./src/base/Error.ts","webpack://@tkey/common-types/./src/base/OneKey.ts","webpack://@tkey/common-types/./src/base/PublicPolynomial.ts","webpack://@tkey/common-types/./src/base/PublicShare.ts","webpack://@tkey/common-types/./src/base/Share.ts","webpack://@tkey/common-types/./src/base/Polynomial.ts","webpack://@tkey/common-types/./src/base/ShareStore.ts","webpack://@tkey/common-types/./src/base/index.ts","webpack://@tkey/common-types/external commonjs2 \"@toruslabs/rss-client\"","webpack://@tkey/common-types/./src/baseTypes/commonTypes.ts","webpack://@tkey/common-types/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"elliptic\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"serialize-error\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"web3-utils\");","import { decrypt as ecDecrypt, encrypt as ecEncrypt, generatePrivate } from \"@toruslabs/eccrypto\";\nimport BN from \"bn.js\";\nimport { ec as EC } from \"elliptic\";\nimport { serializeError } from \"serialize-error\";\nimport { keccak256, toChecksumAddress } from \"web3-utils\";\n\nimport { EncryptedMessage } from \"./baseTypes/commonTypes\";\n\n// const privKeyBnToEcc = (bnPrivKey) => {\n//   return bnPrivKey.toBuffer(\"be\", 32);\n// };\n\n// const privKeyBnToPubKeyECC = (bnPrivKey) => {\n//   return getPublic(privKeyBnToEcc(bnPrivKey));\n// };\n\nexport const ecCurve = new EC(\"secp256k1\");\n\n// Wrappers around ECC encrypt/decrypt to use the hex serialization\n// TODO: refactor to take BN\nexport async function encrypt(publicKey: Buffer, msg: Buffer): Promise<EncryptedMessage> {\n  const encryptedDetails = await ecEncrypt(publicKey, msg);\n\n  return {\n    ciphertext: encryptedDetails.ciphertext.toString(\"hex\"),\n    ephemPublicKey: encryptedDetails.ephemPublicKey.toString(\"hex\"),\n    iv: encryptedDetails.iv.toString(\"hex\"),\n    mac: encryptedDetails.mac.toString(\"hex\"),\n  };\n}\n\nexport async function decrypt(privKey: Buffer, msg: EncryptedMessage): Promise<Buffer> {\n  const bufferEncDetails = {\n    ciphertext: Buffer.from(msg.ciphertext, \"hex\"),\n    ephemPublicKey: Buffer.from(msg.ephemPublicKey, \"hex\"),\n    iv: Buffer.from(msg.iv, \"hex\"),\n    mac: Buffer.from(msg.mac, \"hex\"),\n  };\n\n  return ecDecrypt(privKey, bufferEncDetails);\n}\n\nexport function isEmptyObject(obj: unknown): boolean {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\n\nexport const isErrorObj = (err: Error): boolean => err && err.stack && err.message !== \"\";\n\nexport function prettyPrintError(error: Error): string {\n  if (isErrorObj(error)) {\n    return error.message;\n  }\n  return JSON.stringify(serializeError(error));\n}\n\nexport function generateAddressFromPublicKey(publicKey: Buffer): string {\n  const ethAddressLower = `0x${keccak256(publicKey.toString(\"hex\")).slice(64 - 38)}`;\n  return toChecksumAddress(ethAddressLower);\n}\n\nexport function normalize(input: number | string): string {\n  if (!input) {\n    return undefined;\n  }\n  let hexString;\n\n  if (typeof input === \"number\") {\n    hexString = input.toString(16);\n    if (hexString.length % 2) {\n      hexString = `0${hexString}`;\n    }\n  }\n\n  if (typeof input === \"string\") {\n    hexString = input.toLowerCase();\n  }\n\n  return `0x${hexString}`;\n}\n\nexport function generatePrivateExcludingIndexes(shareIndexes: Array<BN>): BN {\n  const key = new BN(generatePrivate());\n  if (shareIndexes.find((el) => el.eq(key))) {\n    return generatePrivateExcludingIndexes(shareIndexes);\n  }\n  return key;\n}\n\nexport const KEY_NOT_FOUND = \"KEY_NOT_FOUND\";\nexport const SHARE_DELETED = \"SHARE_DELETED\";\n\nexport function derivePubKeyXFromPolyID(polyID: string): string {\n  return polyID.split(\"|\")[0].slice(2);\n}\n\nexport function stripHexPrefix(str: string): string {\n  if (str.slice(0, 2) === \"0x\") return str.slice(2);\n  return str;\n}\n\nexport function generateID(): string {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return `${Math.random().toString(36).substr(2, 9)}`;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","import BN from \"bn.js\";\n\nimport { BNString, IPoint, StringifiedType } from \"../baseTypes/commonTypes\";\nimport { ecCurve } from \"../utils\";\n\nclass Point implements IPoint {\n  x: BN;\n\n  y: BN;\n\n  constructor(x: BNString, y: BNString) {\n    this.x = new BN(x, \"hex\");\n    this.y = new BN(y, \"hex\");\n  }\n\n  static fromCompressedPub(value: string): Point {\n    const key = ecCurve.keyFromPublic(value, \"hex\");\n    const pt = key.getPublic();\n    return new Point(pt.getX(), pt.getY());\n  }\n\n  static fromJSON(value: StringifiedType): Point {\n    const { x, y } = value;\n    return new Point(x, y);\n  }\n\n  // complies with EC and elliptic pub key types\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  encode(enc: string, params?: any): Buffer {\n    switch (enc) {\n      case \"arr\":\n        return Buffer.concat([Buffer.from(\"0x04\", \"hex\"), Buffer.from(this.x.toString(\"hex\"), \"hex\"), Buffer.from(this.y.toString(\"hex\"), \"hex\")]);\n      case \"elliptic-compressed\": {\n        // TODO: WHAT IS THIS.?\n        let ec = params;\n        ec = ecCurve;\n        const key = ec.keyFromPublic({ x: this.x.toString(\"hex\"), y: this.y.toString(\"hex\") }, \"hex\");\n        return Buffer.from(key.getPublic(true, \"hex\"));\n      }\n      default:\n        throw new Error(\"encoding doesnt exist in Point\");\n    }\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      x: this.x.toString(\"hex\"),\n      y: this.y.toString(\"hex\"),\n    };\n  }\n}\n\nexport default Point;\n","import { getPublic } from \"@toruslabs/eccrypto\";\nimport BN from \"bn.js\";\nimport type { curve, ec } from \"elliptic\";\n\nimport { BNString } from \"../baseTypes/commonTypes\";\nimport { ecCurve } from \"../utils\";\nimport Point from \"./Point\";\n\n// These functions are here because BN can't be extended\nexport const toPrivKeyEC = (bn: BN): ec.KeyPair => ecCurve.keyFromPrivate(bn.toString(\"hex\", 64));\n\nexport const toPrivKeyECC = (bn: BNString): Buffer => {\n  const tmp = new BN(bn, \"hex\");\n  return Buffer.from(tmp.toString(\"hex\", 64), \"hex\");\n};\n\nexport const getPubKeyEC = (bn: BN): curve.base.BasePoint => ecCurve.keyFromPrivate(bn.toString(\"hex\", 64)).getPublic();\n\nexport const getPubKeyECC = (bn: BN): Buffer => getPublic(toPrivKeyECC(bn));\n\nexport const getPubKeyPoint = (bn: BN): Point => {\n  const pubKeyEc = getPubKeyEC(bn);\n  return new Point(pubKeyEc.getX().toString(\"hex\"), pubKeyEc.getY().toString(\"hex\"));\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/assertThisInitialized\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"ts-custom-error\");","import { CustomError } from \"ts-custom-error\";\n\n// @flow\nexport interface ITkeyError extends CustomError {\n  name: string;\n  code: number;\n  message: string;\n  toString(): string;\n}\n\nexport type ErrorCodes = {\n  [key: number]: string;\n};\n\nexport abstract class TkeyError extends CustomError implements ITkeyError {\n  code: number;\n\n  message: string;\n\n  public constructor(code?: number, message?: string) {\n    // takes care of stack and proto\n    super(message);\n\n    this.code = code;\n    this.message = message || \"\";\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"TkeyError\" });\n  }\n\n  toJSON(): ITkeyError {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n    };\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n","export const ONE_KEY_DELETE_NONCE = \"__ONE_KEY_DELETE_NONCE__\";\nexport const ONE_KEY_NAMESPACE = \"noncev2\";\n","import { ISerializable, PolynomialID, StringifiedType } from \"../baseTypes/commonTypes\";\nimport Point from \"./Point\";\n\nclass PublicPolynomial implements ISerializable {\n  polynomialCommitments: Point[];\n\n  polynomialId: PolynomialID;\n\n  constructor(polynomialCommitments: Point[]) {\n    this.polynomialCommitments = polynomialCommitments;\n  }\n\n  static fromJSON(value: StringifiedType): PublicPolynomial {\n    const points: Point[] = value.polynomialCommitments.map((x: StringifiedType) => Point.fromJSON(x));\n    return new PublicPolynomial(points);\n  }\n\n  getThreshold(): number {\n    return this.polynomialCommitments.length;\n  }\n\n  getPolynomialID(): PolynomialID {\n    let idSeed = \"\";\n    for (let i = 0; i < this.polynomialCommitments.length; i += 1) {\n      let nextChunk = this.polynomialCommitments[i].encode(\"elliptic-compressed\").toString();\n      if (i !== 0) {\n        nextChunk = `|${nextChunk}`;\n      }\n      idSeed += nextChunk;\n    }\n    this.polynomialId = idSeed;\n    return this.polynomialId;\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      polynomialCommitments: this.polynomialCommitments,\n    };\n  }\n}\n\n// @flow\nexport type PublicPolynomialMap = {\n  [polynomialID: string]: PublicPolynomial;\n};\n\nexport default PublicPolynomial;\n","import BN from \"bn.js\";\n\nimport { BNString, ISerializable, StringifiedType } from \"../baseTypes/commonTypes\";\nimport Point from \"./Point\";\n\nclass PublicShare implements ISerializable {\n  shareCommitment: Point;\n\n  shareIndex: BN;\n\n  constructor(shareIndex: BNString, shareCommitment: Point) {\n    this.shareCommitment = new Point(shareCommitment.x, shareCommitment.y);\n    this.shareIndex = new BN(shareIndex, \"hex\");\n  }\n\n  static fromJSON(value: StringifiedType): PublicShare {\n    const { shareCommitment, shareIndex } = value;\n    return new PublicShare(shareIndex, Point.fromJSON(shareCommitment));\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      shareCommitment: this.shareCommitment,\n      shareIndex: this.shareIndex.toString(\"hex\"),\n    };\n  }\n}\n\nexport default PublicShare;\n\ntype PublicShareShareIndexMap = {\n  [shareIndex: string]: PublicShare;\n};\n\n// @flow\nexport type PublicSharePolyIDShareIndexMap = {\n  [polynomialID: string]: PublicShareShareIndexMap;\n};\n","import BN from \"bn.js\";\n\nimport { BNString, ISerializable, StringifiedType } from \"../baseTypes/commonTypes\";\nimport { getPubKeyPoint } from \"./BNUtils\";\nimport PublicShare from \"./PublicShare\";\n\nclass Share implements ISerializable {\n  share: BN;\n\n  shareIndex: BN;\n\n  constructor(shareIndex: BNString, share: BNString) {\n    this.share = new BN(share, \"hex\");\n    this.shareIndex = new BN(shareIndex, \"hex\");\n  }\n\n  static fromJSON(value: StringifiedType): Share {\n    const { share, shareIndex } = value;\n    return new Share(shareIndex, share);\n  }\n\n  getPublicShare(): PublicShare {\n    return new PublicShare(this.shareIndex, getPubKeyPoint(this.share));\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      share: this.share.toString(\"hex\"),\n      shareIndex: this.shareIndex.toString(\"hex\"),\n    };\n  }\n}\n\nexport default Share;\n","import BN from \"bn.js\";\n\nimport { BNString, ISerializable, PolynomialID, StringifiedType } from \"../baseTypes/commonTypes\";\nimport { ecCurve } from \"../utils\";\nimport { getPubKeyPoint } from \"./BNUtils\";\nimport Point from \"./Point\";\nimport PublicPolynomial from \"./PublicPolynomial\";\nimport Share from \"./Share\";\n\n// @flow\nexport type ShareMap = {\n  [x: string]: Share;\n};\n\nclass Polynomial implements ISerializable {\n  polynomial: BN[];\n\n  publicPolynomial: PublicPolynomial;\n\n  constructor(polynomial: BN[]) {\n    this.polynomial = polynomial;\n  }\n\n  static fromJSON(value: StringifiedType): Polynomial {\n    const { polynomial } = value;\n    return new Polynomial(polynomial.map((x: string) => new BN(x, \"hex\")));\n  }\n\n  getThreshold(): number {\n    return this.polynomial.length;\n  }\n\n  polyEval(x: BNString): BN {\n    const tmpX = new BN(x, \"hex\");\n    let xi = new BN(tmpX);\n    let sum = new BN(0);\n    sum = sum.add(this.polynomial[0]);\n    for (let i = 1; i < this.polynomial.length; i += 1) {\n      const tmp = xi.mul(this.polynomial[i]);\n      sum = sum.add(tmp);\n      sum = sum.umod(ecCurve.curve.n);\n      xi = xi.mul(new BN(tmpX));\n      xi = xi.umod(ecCurve.curve.n);\n    }\n    return sum;\n  }\n\n  generateShares(shareIndexes: BNString[]): ShareMap {\n    const newShareIndexes = shareIndexes.map((index) => {\n      if (typeof index === \"number\") {\n        return new BN(index);\n      }\n      if (index instanceof BN) {\n        return index;\n      }\n      if (typeof index === \"string\") {\n        return new BN(index, \"hex\");\n      }\n      return index;\n    });\n\n    const shares: ShareMap = {};\n    for (let x = 0; x < newShareIndexes.length; x += 1) {\n      shares[newShareIndexes[x].toString(\"hex\")] = new Share(newShareIndexes[x], this.polyEval(newShareIndexes[x]));\n    }\n    return shares;\n  }\n\n  getPublicPolynomial(): PublicPolynomial {\n    const polynomialCommitments: Point[] = [];\n    for (let i = 0; i < this.polynomial.length; i += 1) {\n      polynomialCommitments.push(getPubKeyPoint(this.polynomial[i]));\n    }\n    this.publicPolynomial = new PublicPolynomial(polynomialCommitments);\n    return this.publicPolynomial;\n  }\n\n  getPolynomialID(): PolynomialID {\n    return this.publicPolynomial.polynomialId;\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      polynomial: this.polynomial.map((x) => x.toString(\"hex\")),\n    };\n  }\n}\n\nexport default Polynomial;\n","import { ISerializable, PolynomialID, StringifiedType } from \"../baseTypes/commonTypes\";\nimport Share from \"./Share\";\n\nclass ShareStore implements ISerializable {\n  share: Share;\n\n  polynomialID: PolynomialID;\n\n  constructor(share: Share, polynomialID: PolynomialID) {\n    this.share = share;\n    this.polynomialID = polynomialID;\n  }\n\n  static fromJSON(value: StringifiedType): ShareStore {\n    const { share, polynomialID } = value;\n    return new ShareStore(Share.fromJSON(share), polynomialID);\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      share: this.share,\n      polynomialID: this.polynomialID.toString(),\n    };\n  }\n}\n\nexport type EncryptedShareStore = {\n  [shareCommitment: string]: ShareStore;\n};\n\n// @flow\nexport type ShareStoreMap = {\n  [shareIndex: string]: ShareStore;\n};\n\nexport type ShareStorePolyIDShareIndexMap = {\n  [polynomialID: string]: ShareStoreMap;\n};\n\nexport default ShareStore;\n","export * from \"./BNUtils\";\nexport * from \"./Error\";\nexport * from \"./OneKey\";\nexport { default as Point } from \"./Point\";\nexport { default as Polynomial } from \"./Polynomial\";\nexport * from \"./Polynomial\";\nexport { default as PublicPolynomial } from \"./PublicPolynomial\";\nexport * from \"./PublicPolynomial\";\nexport { default as PublicShare } from \"./PublicShare\";\nexport * from \"./PublicShare\";\nexport { default as Share } from \"./Share\";\nexport * from \"./ShareStore\";\nexport { default as ShareStore } from \"./ShareStore\";\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/rss-client\");","import type { CustomAuthArgs } from \"@toruslabs/customauth\";\nimport { PointHex } from \"@toruslabs/rss-client\";\nimport BN from \"bn.js\";\nimport type { curve } from \"elliptic\";\n\nimport Point from \"../base/Point\";\nexport { ecPoint, hexPoint, PointHex, randomSelection, RSSClient } from \"@toruslabs/rss-client\";\n\nexport type PubKeyType = \"ecc\";\n\n// @flow\nexport type PolynomialID = string;\n\nexport type PolyIDAndShares = [PolynomialID, string[]];\n\nexport type BNString = string | BN;\n\nexport interface EncryptedMessage {\n  ciphertext: string;\n  ephemPublicKey: string;\n  iv: string;\n  mac: string;\n}\n\n// if \"direct\", no serverEncs (empty array), and the tssShare is just the decryption of userEnc\n// if \"hierarchical\", there are serverEncs, and the tssShare is hierarchically stored\n// and requires userEnc and threshold number of serverEncs to recover the tssShare\nexport type FactorEncType = \"direct\" | \"hierarchical\";\n\nexport type FactorEnc = {\n  tssIndex: number;\n  type: FactorEncType;\n  userEnc: EncryptedMessage;\n  serverEncs: EncryptedMessage[];\n};\nexport interface ServiceProviderArgs {\n  enableLogging?: boolean;\n  postboxKey?: string;\n  useTSS?: boolean;\n}\n\nexport interface TorusServiceProviderArgs extends ServiceProviderArgs {\n  customAuthArgs: CustomAuthArgs;\n  nodeEndpoints?: string[];\n  nodePubKeys?: PointHex[];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type StringifiedType = Record<string, any>;\n\nexport interface ISerializable {\n  toJSON(): StringifiedType;\n}\n\nexport interface IPoint extends ISerializable {\n  x: BN;\n  y: BN;\n  encode(enc: string, params?: unknown): Buffer;\n}\n\nexport interface IServiceProvider extends ISerializable {\n  enableLogging: boolean;\n\n  postboxKey: BN;\n\n  serviceProviderName: string;\n\n  encrypt(msg: Buffer): Promise<EncryptedMessage>;\n  decrypt(msg: EncryptedMessage): Promise<Buffer>;\n  retrievePubKey(type: PubKeyType): Buffer;\n  retrievePubKeyPoint(): curve.base.BasePoint;\n  getVerifierNameVerifierId(): string;\n  getTSSNodeDetails(): Promise<{\n    serverEndpoints: string[];\n    serverPubKeys: PointHex[];\n    serverThreshold: number;\n  }>;\n  getRSSNodeDetails(): Promise<{\n    serverEndpoints: string[];\n    serverPubKeys: PointHex[];\n    serverThreshold: number;\n  }>;\n  getSSSNodeDetails(): Promise<{\n    serverEndpoints: string[];\n    serverPubKeys: PointHex[];\n    serverThreshold: number;\n  }>;\n  getTSSPubKey(tssTag: string, tssNonce: number): Promise<Point>;\n  sign(msg: BNString): string;\n}\nexport type TorusStorageLayerAPIParams = {\n  pub_key_X: string;\n  pub_key_Y: string;\n  set_data: unknown;\n  signature: string;\n  namespace: string;\n};\n\nexport interface IStorageLayer extends ISerializable {\n  storageLayerName: string;\n\n  getMetadata<T>(params: { serviceProvider?: IServiceProvider; privKey?: BN }): Promise<T>;\n\n  setMetadata<T>(params: { input: T; serviceProvider?: IServiceProvider; privKey?: BN }): Promise<{ message: string }>;\n\n  setMetadataStream<T>(params: { input: T[]; serviceProvider?: IServiceProvider; privKey?: BN[] }): Promise<{ message: string }>;\n\n  acquireWriteLock(params: { serviceProvider?: IServiceProvider; privKey?: BN }): Promise<{ status: number; id?: string }>;\n\n  releaseWriteLock(params: { id: string; serviceProvider?: IServiceProvider; privKey?: BN }): Promise<{ status: number }>;\n}\n\nexport type TorusStorageLayerArgs = {\n  enableLogging?: boolean;\n  hostUrl?: string;\n  serverTimeOffset?: number;\n};\n\nexport type MockStorageLayerArgs = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  dataMap: any;\n  lockMap: any;\n};\n\nexport type ShareDescriptionMap = {\n  [shareIndexStr: string]: string[];\n};\n\nexport type FromJSONConstructor = {\n  fromJSON(value: StringifiedType): any;\n};\n\nexport type DeviceShareDescription = { module: string; userAgent: string; dateAdded: number; customDeviceInfo?: string };\n\nexport type InitializeNewTSSKeyResult = {\n  tss2: BN;\n  tssPolyCommits: Point[];\n  factorPubs: Point[];\n  factorEncs: {\n    [factorPubID: string]: FactorEnc;\n  };\n};\n","export * from \"./base\";\nexport * from \"./baseTypes/aggregateTypes\";\nexport * from \"./baseTypes/commonTypes\";\nexport * from \"./utils\";\n"],"names":["decrypt","ecDecrypt","encrypt","ecEncrypt","generatePrivate","BN","ec","EC","serializeError","keccak256","toChecksumAddress","ecCurve","publicKey","msg","encryptedDetails","ciphertext","toString","ephemPublicKey","iv","mac","privKey","bufferEncDetails","Buffer","from","isEmptyObject","obj","Object","keys","length","constructor","isErrorObj","err","stack","message","prettyPrintError","error","JSON","stringify","generateAddressFromPublicKey","ethAddressLower","slice","normalize","input","undefined","hexString","toLowerCase","generatePrivateExcludingIndexes","shareIndexes","key","find","el","eq","KEY_NOT_FOUND","SHARE_DELETED","derivePubKeyXFromPolyID","polyID","split","stripHexPrefix","str","generateID","Math","random","substr","Point","x","y","enc","params","concat","keyFromPublic","getPublic","Error","value","pt","getX","getY","toPrivKeyEC","bn","keyFromPrivate","toPrivKeyECC","tmp","getPubKeyEC","getPubKeyECC","getPubKeyPoint","pubKeyEc","CustomError","TkeyError","code","defineProperty","name","toJSON","ONE_KEY_DELETE_NONCE","ONE_KEY_NAMESPACE","PublicPolynomial","polynomialCommitments","idSeed","i","nextChunk","encode","polynomialId","points","map","fromJSON","PublicShare","shareIndex","shareCommitment","Share","share","Polynomial","polynomial","tmpX","xi","sum","add","mul","umod","curve","n","newShareIndexes","index","shares","polyEval","push","publicPolynomial","ShareStore","polynomialID","default","ecPoint","hexPoint","PointHex","randomSelection","RSSClient"],"sourceRoot":""}