{"version":3,"file":"serviceProviderBase.cjs.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNA,MAAM,gCAA4B;;;ACAlC,MAAM,8BAA4B;;;ACAlC,MAAM,2BAA4B;;;ACAlC,MAAM,8BAA4B;;;ACAlC,MAAM,2BAA4B;;;ACAlC,MAAM,4BAA4B;;ACAlC,MAAM,8BAA4B;;;;;;;;ACcN;AACL;AAAA,IAGjBQ,mBAAmB;EAOvB;;EA2BA,mCAAwF;IAAA,8BAA1EC,aAAa;MAAbA,aAAa,mCAAG,KAAK;MAAEC,UAAU,QAAVA,UAAU;MAAA,mBAAEC,MAAM;MAANA,MAAM,4BAAG,KAAK;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAC7D,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACF,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,UAAU,GAAG,IAAIH,0BAAE,CAACG,UAAU,EAAE,KAAK,CAAC;IAC3C,IAAI,CAACE,mBAAmB,GAAG,qBAAqB;IAChD,IAAI,CAACC,UAAU,GAAG,CAAC,CAAC;IACpB,IAAI,CAACC,cAAc,GAAG;MACpBC,eAAe,EAAE,EAAE;MACnBC,aAAa,EAAE,EAAE;MACjBC,eAAe,EAAE,CAAC;IACpB,CAAC;IACD,IAAI,CAACC,cAAc,GAAG;MACpBH,eAAe,EAAE,EAAE;MACnBC,aAAa,EAAE,EAAE;MACjBC,eAAe,EAAE,CAAC;IACpB,CAAC;IACD,IAAI,CAACE,cAAc,GAAG;MACpBJ,eAAe,EAAE,EAAE;MACnBC,aAAa,EAAE,EAAE;MACjBC,eAAe,EAAE,CAAC;IACpB,CAAC;EACH;EAAC;IAAA;IAAA;MAAA,mFASD,iBAAcG,GAAW;QAAA;QAAA;UAAA;YAAA;cAAA;gBACjBC,SAAS,GAAG,IAAI,CAACC,cAAc,CAAC,KAAK,CAAC;gBAAA,iCACrCnB,wCAAY,CAACkB,SAAS,EAAED,GAAG,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACpC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,mFAED,kBAAcA,GAAqB;QAAA;UAAA;YAAA;cAAA;gBAAA,kCAC1BnB,wCAAY,CAACK,6CAAY,CAAC,IAAI,CAACI,UAAU,CAAC,EAAEU,GAAG,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACxD;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OAED,+BAA4C;MAC1C,OAAOf,4CAAW,CAAC,IAAI,CAACK,UAAU,CAAC,CAACa,SAAS,EAAE;IACjD;EAAC;IAAA;IAAA,OAED,wBAAeC,IAAgB,EAAU;MACvC,IAAIA,IAAI,KAAK,KAAK,EAAE;QAClB,OAAOpB,6CAAY,CAAC,IAAI,CAACM,UAAU,CAAC;MACtC;MACA,MAAM,IAAIe,KAAK,CAAC,0BAA0B,CAAC;IAC7C;EAAC;IAAA;IAAA,OAED,oCAA2BC,YAAoB,EAAEC,UAAkB,EAAE;MACnE,IAAI,CAACD,YAAY,GAAGA,YAAY;MAChC,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC9B;EAAC;IAAA;IAAA,OAED,qCAAoC;MAClC,iBAAU,IAAI,CAACD,YAAY,iBAAS,IAAI,CAACC,UAAU;IACrD;EAAC;IAAA;IAAA,OAED,4BAAmBZ,eAAyB,EAAEC,aAAyB,EAAEC,eAAuB,EAAQ;MACtG,IAAI,CAACH,cAAc,GAAG;QACpBC,eAAe,EAAfA,eAAe;QACfC,aAAa,EAAbA,aAAa;QACbC,eAAe,EAAfA;MACF,CAAC;IACH;EAAC;IAAA;IAAA;MAAA,6FAED;QAAA;UAAA;YAAA;cAAA;gBAAA,kCAKS,IAAI,CAACH,cAAc;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC3B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,6FAED;QAAA;UAAA;YAAA;cAAA;gBAAA,kCAKS,IAAI,CAACI,cAAc;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC3B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,6FAED;QAAA;UAAA;YAAA;cAAA;gBAAA,kCAKS,IAAI,CAACC,cAAc;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC3B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OAED,uBAAcS,MAAc,EAAEC,QAAgB,EAAEC,SAAgB,EAAE;MAChE,IAAI,CAACjB,UAAU,WAAI,IAAI,CAACa,YAAY,iBAAS,IAAI,CAACC,UAAU,iBAASC,MAAM,iBAASC,QAAQ,EAAG,GAAGC,SAAS;IAC7G;EAAC;IAAA;IAAA;MAAA,wFAED,kBAAmBF,MAAc,EAAEC,QAAgB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAC3CC,SAAS,GAAG,IAAI,CAACjB,UAAU,WAAI,IAAI,CAACa,YAAY,iBAAS,IAAI,CAACC,UAAU,iBAASC,MAAM,iBAASC,QAAQ,EAAG;gBAAA,IAE5GC,SAAS;kBAAA;kBAAA;gBAAA;gBAAA,MACN,IAAIL,KAAK,8CAAuC,IAAI,CAACC,YAAY,iBAAS,IAAI,CAACC,UAAU,iBAASC,MAAM,iBAASC,QAAQ,EAAG;cAAA;gBAAA,kCAE7HC,SAAS;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACjB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OAED,cAAKV,GAAa,EAAU;MAC1B,IAAMW,GAAG,GAAG,IAAIxB,0BAAE,CAACa,GAAG,EAAE,KAAK,CAAC;MAC9B,IAAMY,GAAG,GAAG3B,4CAAW,CAAC,IAAI,CAACK,UAAU,CAAC,CAACuB,IAAI,CAACF,GAAG,CAACG,QAAQ,CAAC,KAAK,CAAC,CAAC;MAClE,OAAOC,MAAM,CAACC,IAAI,CAACJ,GAAG,CAACK,CAAC,CAACH,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,GAAGF,GAAG,CAACM,CAAC,CAACJ,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,IAAI3B,0BAAE,CAAC,CAAC,CAAC,CAAC2B,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,CAACA,QAAQ,CAAC,QAAQ,CAAC;IAC3H;EAAC;IAAA;IAAA,OAED,kBAA0B;MACxB,OAAO;QACLzB,aAAa,EAAE,IAAI,CAACA,aAAa;QACjCC,UAAU,EAAE,IAAI,CAACA,UAAU,CAACwB,QAAQ,CAAC,KAAK,CAAC;QAC3CtB,mBAAmB,EAAE,IAAI,CAACA;MAC5B,CAAC;IACH;EAAC;IAAA;IAAA,OA7FD,kBAAgB2B,KAAsB,EAAoB;MACxD,IAAQ9B,aAAa,GAAsC8B,KAAK,CAAxD9B,aAAa;QAAEC,UAAU,GAA0B6B,KAAK,CAAzC7B,UAAU;QAAEE,mBAAmB,GAAK2B,KAAK,CAA7B3B,mBAAmB;MACtD,IAAIA,mBAAmB,KAAK,qBAAqB,EAAE,OAAO4B,SAAS;MAEnE,OAAO,IAAIhC,mBAAmB,CAAC;QAAEC,aAAa,EAAbA,aAAa;QAAEC,UAAU,EAAVA;MAAW,CAAC,CAAC;IAC/D;EAAC;EAAA;AAAA;AA2FH,8DAAeF,mBAAmB","sources":["webpack://@tkey/service-provider-base/webpack/bootstrap","webpack://@tkey/service-provider-base/webpack/runtime/compat get default export","webpack://@tkey/service-provider-base/webpack/runtime/define property getters","webpack://@tkey/service-provider-base/webpack/runtime/hasOwnProperty shorthand","webpack://@tkey/service-provider-base/webpack/runtime/make namespace object","webpack://@tkey/service-provider-base/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@tkey/service-provider-base/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@tkey/service-provider-base/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@tkey/service-provider-base/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@tkey/service-provider-base/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@tkey/service-provider-base/external commonjs2 \"@tkey/common-types\"","webpack://@tkey/service-provider-base/external commonjs2 \"bn.js\"","webpack://@tkey/service-provider-base/./src/ServiceProviderBase.ts","webpack://@tkey/service-provider-base/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey/common-types\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","import {\n  BNString,\n  decrypt as decryptUtils,\n  encrypt as encryptUtils,\n  EncryptedMessage,\n  getPubKeyECC,\n  IServiceProvider,\n  Point,\n  PointHex,\n  PubKeyType,\n  ServiceProviderArgs,\n  StringifiedType,\n  toPrivKeyEC,\n  toPrivKeyECC,\n} from \"@tkey/common-types\";\nimport BN from \"bn.js\";\nimport { curve } from \"elliptic\";\n\nclass ServiceProviderBase implements IServiceProvider {\n  enableLogging: boolean;\n\n  useTSS: boolean;\n\n  tssPubKeys: Record<string, Point>;\n\n  // For easy serialization\n  postboxKey: BN;\n\n  serviceProviderName: string;\n\n  verifierName?: string;\n\n  verifierId?: string;\n\n  tssNodeDetails: {\n    serverEndpoints: string[];\n    serverPubKeys: PointHex[];\n    serverThreshold: number;\n  };\n\n  rssNodeDetails: {\n    serverEndpoints: string[];\n    serverPubKeys: PointHex[];\n    serverThreshold: number;\n  };\n\n  sssNodeDetails: {\n    serverEndpoints: string[];\n    serverPubKeys: PointHex[];\n    serverThreshold: number;\n  };\n\n  constructor({ enableLogging = false, postboxKey, useTSS = false }: ServiceProviderArgs) {\n    this.useTSS = useTSS;\n    this.enableLogging = enableLogging;\n    this.postboxKey = new BN(postboxKey, \"hex\");\n    this.serviceProviderName = \"ServiceProviderBase\";\n    this.tssPubKeys = {};\n    this.tssNodeDetails = {\n      serverEndpoints: [],\n      serverPubKeys: [],\n      serverThreshold: -1,\n    };\n    this.rssNodeDetails = {\n      serverEndpoints: [],\n      serverPubKeys: [],\n      serverThreshold: -1,\n    };\n    this.sssNodeDetails = {\n      serverEndpoints: [],\n      serverPubKeys: [],\n      serverThreshold: -1,\n    };\n  }\n\n  static fromJSON(value: StringifiedType): IServiceProvider {\n    const { enableLogging, postboxKey, serviceProviderName } = value;\n    if (serviceProviderName !== \"ServiceProviderBase\") return undefined;\n\n    return new ServiceProviderBase({ enableLogging, postboxKey });\n  }\n\n  async encrypt(msg: Buffer): Promise<EncryptedMessage> {\n    const publicKey = this.retrievePubKey(\"ecc\");\n    return encryptUtils(publicKey, msg);\n  }\n\n  async decrypt(msg: EncryptedMessage): Promise<Buffer> {\n    return decryptUtils(toPrivKeyECC(this.postboxKey), msg);\n  }\n\n  retrievePubKeyPoint(): curve.base.BasePoint {\n    return toPrivKeyEC(this.postboxKey).getPublic();\n  }\n\n  retrievePubKey(type: PubKeyType): Buffer {\n    if (type === \"ecc\") {\n      return getPubKeyECC(this.postboxKey);\n    }\n    throw new Error(\"Unsupported pub key type\");\n  }\n\n  _setVerifierNameVerifierId(verifierName: string, verifierId: string) {\n    this.verifierName = verifierName;\n    this.verifierId = verifierId;\n  }\n\n  getVerifierNameVerifierId(): string {\n    return `${this.verifierName}\\u001c${this.verifierId}`;\n  }\n\n  _setTSSNodeDetails(serverEndpoints: string[], serverPubKeys: PointHex[], serverThreshold: number): void {\n    this.tssNodeDetails = {\n      serverEndpoints,\n      serverPubKeys,\n      serverThreshold,\n    };\n  }\n\n  async getTSSNodeDetails(): Promise<{\n    serverEndpoints: string[];\n    serverPubKeys: PointHex[];\n    serverThreshold: number;\n  }> {\n    return this.tssNodeDetails;\n  }\n\n  async getRSSNodeDetails(): Promise<{\n    serverEndpoints: string[];\n    serverPubKeys: PointHex[];\n    serverThreshold: number;\n  }> {\n    return this.rssNodeDetails;\n  }\n\n  async getSSSNodeDetails(): Promise<{\n    serverEndpoints: string[];\n    serverPubKeys: PointHex[];\n    serverThreshold: number;\n  }> {\n    return this.sssNodeDetails;\n  }\n\n  _setTSSPubKey(tssTag: string, tssNonce: number, tssPubKey: Point) {\n    this.tssPubKeys[`${this.verifierName}\\u001c${this.verifierId}\\u0015${tssTag}\\u0016${tssNonce}`] = tssPubKey;\n  }\n\n  async getTSSPubKey(tssTag: string, tssNonce: number): Promise<Point> {\n    const tssPubKey = this.tssPubKeys[`${this.verifierName}\\u001c${this.verifierId}\\u0015${tssTag}\\u0016${tssNonce}`];\n\n    if (!tssPubKey) {\n      throw new Error(`tss pub key could not be found for ${this.verifierName}\\u001c${this.verifierId}\\u0015${tssTag}\\u0016${tssNonce}`);\n    }\n    return tssPubKey;\n  }\n\n  sign(msg: BNString): string {\n    const tmp = new BN(msg, \"hex\");\n    const sig = toPrivKeyEC(this.postboxKey).sign(tmp.toString(\"hex\"));\n    return Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(0).toString(16, 2), \"hex\").toString(\"base64\");\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      enableLogging: this.enableLogging,\n      postboxKey: this.postboxKey.toString(\"hex\"),\n      serviceProviderName: this.serviceProviderName,\n    };\n  }\n}\n\nexport default ServiceProviderBase;\n","export { default, default as ServiceProviderBase } from \"./ServiceProviderBase\";\n"],"names":["decrypt","decryptUtils","encrypt","encryptUtils","getPubKeyECC","toPrivKeyEC","toPrivKeyECC","BN","ServiceProviderBase","enableLogging","postboxKey","useTSS","serviceProviderName","tssPubKeys","tssNodeDetails","serverEndpoints","serverPubKeys","serverThreshold","rssNodeDetails","sssNodeDetails","msg","publicKey","retrievePubKey","getPublic","type","Error","verifierName","verifierId","tssTag","tssNonce","tssPubKey","tmp","sig","sign","toString","Buffer","from","r","s","value","undefined","default"],"sourceRoot":""}