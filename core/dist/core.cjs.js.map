{"version":3,"file":"core.cjs.js","mappings":"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","sources":["webpack://@tkey/core/webpack/bootstrap","webpack://@tkey/core/webpack/runtime/compat get default export","webpack://@tkey/core/webpack/runtime/define property getters","webpack://@tkey/core/webpack/runtime/hasOwnProperty shorthand","webpack://@tkey/core/webpack/runtime/make namespace object","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@tkey/core/external commonjs2 \"@tkey/common-types\"","webpack://@tkey/core/external commonjs2 \"json-stable-stringify\"","webpack://@tkey/core/external commonjs2 \"web3-utils\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/assertThisInitialized\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@tkey/core/./src/errors.ts","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/toConsumableArray\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@tkey/core/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@tkey/core/external commonjs2 \"bn.js\"","webpack://@tkey/core/external commonjs2 \"@toruslabs/eccrypto\"","webpack://@tkey/core/./src/lagrangeInterpolatePolynomial.ts","webpack://@tkey/core/./src/metadata.ts","webpack://@tkey/core/./src/authMetadata.ts","webpack://@tkey/core/external commonjs2 \"@babel/runtime/helpers/typeof\"","webpack://@tkey/core/./src/core.ts","webpack://@tkey/core/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey/common-types\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"json-stable-stringify\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"web3-utils\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/assertThisInitialized\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","import { ErrorCodes, ITkeyError, TkeyError } from \"@tkey/common-types\";\n\n/**\n * CoreError, extension for Error using CustomError\n * details: github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n *\n * Usage:\n * 1. throw CoreError.metadataUndefined() // regularly used errors\n * 2. throw CoreError.fromCode(1304); // throw via code\n * 3. throw new CoreError(1000, \"share indexes should be unique\"); // for scarce errors\n *\n * Guide:\n * 1000 - core\n * 2000 - security questions\n * 3000 - webstorage\n * 4000 - common types (code reserved for future implementation)\n * 5000 - private key\n * 6000 - seed phrase\n * 7000 - share serialization\n * 8000 - share transfer\n */\nclass CoreError extends TkeyError {\n  protected static messages: ErrorCodes = {\n    1000: \"Custom\",\n    // Misc\n    1001: \"Unable to delete service provider share\",\n    1002: \"Wrong share index\",\n    1003: \"Unable to updateSDK\",\n    // metadata\n    1101: \"metadata not found, SDK likely not initialized\",\n    1102: \"getMetadata errored\",\n    1103: \"setMetadata errored\",\n    1104: \"previouslyFetchedCloudMetadata provided in initialization is outdated\",\n    1105: \"previouslyFetchedCloudMetadata.nonce should never be higher than the latestShareDetails, please contact support\",\n    // tkeystore\n    1201: \"Invalid tkeyStore\",\n    1202: \"Encryption failed\",\n    1203: \"Decryption failed\",\n    // shares\n    1301: \"Private key not available. Please reconstruct key first\",\n    1302: \"Unable to reconstruct\",\n    1303: \"reconstructed key is not pub key\",\n    1304: \"Share found in unexpected polynomial\",\n    1305: \"Input is not supported\",\n    1306: \"no encrypted share store for share exists\",\n    1307: \"Share doesn't exist\",\n    1308: \"Share was deleted\",\n    // lock\n    1401: \"Unable to acquire lock\",\n    1402: \"Unable to release lock\",\n    // auth metadata\n    1501: \"privkey unavailable\",\n    1502: \"metadata pubkey unavailable\",\n    1503: \"getAuthMetadata errored\",\n    1504: \"setAuthMetadata errored\",\n    1601: \"delete1OutOf1 requires manualSync=true\",\n  };\n\n  public constructor(code: number, message: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"CoreError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): ITkeyError {\n    return new CoreError(code, `${CoreError.messages[code]} ${extraMessage}`);\n  }\n\n  public static default(extraMessage = \"\"): ITkeyError {\n    return new CoreError(1000, `${CoreError.messages[1000]} ${extraMessage}`);\n  }\n\n  // Custom methods\n  // Metadata\n  public static metadataUndefined(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1101, extraMessage);\n  }\n\n  public static delete1OutOf1OnlyManualSync(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1601, extraMessage);\n  }\n\n  public static metadataGetFailed(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1102, extraMessage);\n  }\n\n  public static metadataPostFailed(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1103, extraMessage);\n  }\n\n  // TkeyData\n  public static tkeyStoreInvalid(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1201, extraMessage);\n  }\n\n  public static tkeyEncryptionFailed(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1202, extraMessage);\n  }\n\n  public static tkeyDecryptionFailed(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1203, extraMessage);\n  }\n\n  // Shares\n  public static privateKeyUnavailable(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1301, extraMessage);\n  }\n\n  public static unableToReconstruct(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1302, extraMessage);\n  }\n\n  public static incorrectReconstruction(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1303, extraMessage);\n  }\n\n  public static encryptedShareStoreUnavailable(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1306, extraMessage);\n  }\n\n  // Metadata locks\n  public static acquireLockFailed(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1401, extraMessage);\n  }\n\n  public static releaseLockFailed(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1402, extraMessage);\n  }\n\n  // Authmetadata\n  public static privKeyUnavailable(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1501, extraMessage);\n  }\n\n  public static metadataPubKeyUnavailable(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1502, extraMessage);\n  }\n\n  public static authMetadataGetUnavailable(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1503, extraMessage);\n  }\n\n  public static authMetadataSetUnavailable(extraMessage = \"\"): ITkeyError {\n    return CoreError.fromCode(1504, extraMessage);\n  }\n}\nexport default CoreError;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/toConsumableArray\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","import { ecCurve, generatePrivateExcludingIndexes, Point, Polynomial, Share } from \"@tkey/common-types\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport BN from \"bn.js\";\nimport { curve } from \"elliptic\";\n\nimport CoreError from \"./errors\";\n\nconst generateEmptyBNArray = (length: number): BN[] => Array.from({ length }, () => new BN(0));\n\nconst denominator = (i: number, innerPoints: Array<Point>) => {\n  let result = new BN(1);\n  const xi = innerPoints[i].x;\n  for (let j = innerPoints.length - 1; j >= 0; j -= 1) {\n    if (i !== j) {\n      let tmp = new BN(xi);\n      tmp = tmp.sub(innerPoints[j].x);\n      tmp = tmp.umod(ecCurve.curve.n);\n      result = result.mul(tmp);\n      result = result.umod(ecCurve.curve.n);\n    }\n  }\n  return result;\n};\n\nconst interpolationPoly = (i: number, innerPoints: Array<Point>): BN[] => {\n  let coefficients = generateEmptyBNArray(innerPoints.length);\n  const d = denominator(i, innerPoints);\n  if (d.cmp(new BN(0)) === 0) {\n    throw CoreError.default(\"Denominator for interpolationPoly is 0\");\n  }\n  coefficients[0] = d.invm(ecCurve.curve.n);\n  for (let k = 0; k < innerPoints.length; k += 1) {\n    const newCoefficients = generateEmptyBNArray(innerPoints.length);\n    if (k !== i) {\n      let j: number;\n      if (k < i) {\n        j = k + 1;\n      } else {\n        j = k;\n      }\n      j -= 1;\n      for (; j >= 0; j -= 1) {\n        newCoefficients[j + 1] = newCoefficients[j + 1].add(coefficients[j]);\n        newCoefficients[j + 1] = newCoefficients[j + 1].umod(ecCurve.curve.n);\n        let tmp = new BN(innerPoints[k].x);\n        tmp = tmp.mul(coefficients[j]);\n        tmp = tmp.umod(ecCurve.curve.n);\n        newCoefficients[j] = newCoefficients[j].sub(tmp);\n        newCoefficients[j] = newCoefficients[j].umod(ecCurve.curve.n);\n      }\n      coefficients = newCoefficients;\n    }\n  }\n  return coefficients;\n};\n\nconst pointSort = (innerPoints: Point[]): Point[] => {\n  const pointArrClone = [...innerPoints];\n  pointArrClone.sort((a, b) => a.x.cmp(b.x));\n  return pointArrClone;\n};\n\nconst lagrange = (unsortedPoints: Point[]) => {\n  const sortedPoints = pointSort(unsortedPoints);\n  const polynomial = generateEmptyBNArray(sortedPoints.length);\n  for (let i = 0; i < sortedPoints.length; i += 1) {\n    const coefficients = interpolationPoly(i, sortedPoints);\n    for (let k = 0; k < sortedPoints.length; k += 1) {\n      let tmp = new BN(sortedPoints[i].y);\n      tmp = tmp.mul(coefficients[k]);\n      polynomial[k] = polynomial[k].add(tmp);\n      polynomial[k] = polynomial[k].umod(ecCurve.curve.n);\n    }\n  }\n  return new Polynomial(polynomial);\n};\n\nexport function lagrangeInterpolatePolynomial(points: Array<Point>): Polynomial {\n  return lagrange(points);\n}\n\nexport function lagrangeInterpolation(shares: BN[], nodeIndex: BN[]): BN {\n  if (shares.length !== nodeIndex.length) {\n    throw CoreError.default(\"shares not equal to nodeIndex length in lagrangeInterpolation\");\n  }\n  let secret = new BN(0);\n  for (let i = 0; i < shares.length; i += 1) {\n    let upper = new BN(1);\n    let lower = new BN(1);\n    for (let j = 0; j < shares.length; j += 1) {\n      if (i !== j) {\n        upper = upper.mul(nodeIndex[j].neg());\n        upper = upper.umod(ecCurve.curve.n);\n        let temp = nodeIndex[i].sub(nodeIndex[j]);\n        temp = temp.umod(ecCurve.curve.n);\n        lower = lower.mul(temp).umod(ecCurve.curve.n);\n      }\n    }\n    let delta = upper.mul(lower.invm(ecCurve.curve.n)).umod(ecCurve.curve.n);\n    delta = delta.mul(shares[i]).umod(ecCurve.curve.n);\n    secret = secret.add(delta);\n  }\n  return secret.umod(ecCurve.curve.n);\n}\n\n// generateRandomPolynomial - determinisiticShares are assumed random\nexport function generateRandomPolynomial(degree: number, secret?: BN, deterministicShares?: Array<Share>): Polynomial {\n  let actualS = secret;\n  if (!secret) {\n    actualS = generatePrivateExcludingIndexes([new BN(0)]);\n  }\n  if (!deterministicShares) {\n    const poly = [actualS];\n    for (let i = 0; i < degree; i += 1) {\n      const share = generatePrivateExcludingIndexes(poly);\n      poly.push(share);\n    }\n    return new Polynomial(poly);\n  }\n  if (!Array.isArray(deterministicShares)) {\n    throw CoreError.default(\"deterministic shares in generateRandomPolynomial should be an array\");\n  }\n\n  if (deterministicShares.length > degree) {\n    throw CoreError.default(\"deterministicShares in generateRandomPolynomial should be less or equal than degree to ensure an element of randomness\");\n  }\n  const points = {};\n  deterministicShares.forEach((share) => {\n    points[share.shareIndex.toString(\"hex\")] = new Point(share.shareIndex, share.share);\n  });\n  for (let i = 0; i < degree - deterministicShares.length; i += 1) {\n    let shareIndex = generatePrivateExcludingIndexes([new BN(0)]);\n    while (points[shareIndex.toString(\"hex\")] !== undefined) {\n      shareIndex = generatePrivateExcludingIndexes([new BN(0)]);\n    }\n    points[shareIndex.toString(\"hex\")] = new Point(shareIndex, new BN(generatePrivate()));\n  }\n  points[\"0\"] = new Point(new BN(0), actualS);\n  return lagrangeInterpolatePolynomial(Object.values(points));\n}\n\n//  2 + 3x = y | secret for index 1 is 5 >>> g^5 is the commitment | now we have g^2, g^3 and 1, |\nexport function polyCommitmentEval(polyCommitments: Array<Point>, index: BN): Point {\n  // convert to base points, this is badly written, its the only way to access the point rn zzz TODO: refactor\n  const basePtPolyCommitments: Array<curve.base.BasePoint> = [];\n  for (let i = 0; i < polyCommitments.length; i += 1) {\n    const key = ecCurve.keyFromPublic({ x: polyCommitments[i].x.toString(\"hex\"), y: polyCommitments[i].y.toString(\"hex\") }, \"\");\n    basePtPolyCommitments.push(key.getPublic());\n  }\n  let shareCommitment = basePtPolyCommitments[0];\n  for (let i = 1; i < basePtPolyCommitments.length; i += 1) {\n    const factor = index.pow(new BN(i)).umod(ecCurve.n);\n    const e = basePtPolyCommitments[i].mul(factor);\n    shareCommitment = shareCommitment.add(e);\n  }\n  return new Point(shareCommitment.getX(), shareCommitment.getY());\n}\n\nexport function dotProduct(arr1: BN[], arr2: BN[], modulus = new BN(0)) {\n  if (arr1.length !== arr2.length) {\n    throw new Error(\"arrays of different lengths\");\n  }\n  let sum = new BN(0);\n  for (let i = 0; i < arr1.length; i++) {\n    sum = sum.add(arr1[i].mul(arr2[i]));\n    if (modulus.cmp(new BN(0)) !== 0) {\n      sum = sum.umod(modulus);\n    }\n  }\n  return sum;\n}\n\nexport const kCombinations = (s: number | number[], k: number): number[][] => {\n  let set = s;\n  if (typeof set === \"number\") {\n    set = Array.from({ length: set }, (_, i) => i);\n  }\n  if (k > set.length || k <= 0) {\n    return [];\n  }\n\n  if (k === set.length) {\n    return [set];\n  }\n\n  if (k === 1) {\n    return set.reduce((acc, cur) => [...acc, [cur]], [] as number[][]);\n  }\n\n  const combs: number[][] = [];\n  let tailCombs: number[][] = [];\n\n  for (let i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1);\n    for (let j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i], ...tailCombs[j]]);\n    }\n  }\n\n  return combs;\n};\n\nexport function getLagrangeCoeffs(_allIndexes, _myIndex, _target = 0) {\n  const allIndexes = _allIndexes.map((i) => new BN(i));\n  const myIndex = new BN(_myIndex);\n  const target = new BN(_target);\n  let upper = new BN(1);\n  let lower = new BN(1);\n  for (let j = 0; j < allIndexes.length; j += 1) {\n    if (myIndex.cmp(allIndexes[j]) !== 0) {\n      let tempUpper = target.sub(allIndexes[j]);\n      tempUpper = tempUpper.umod(ecCurve.curve.n);\n      upper = upper.mul(tempUpper);\n      upper = upper.umod(ecCurve.curve.n);\n      let tempLower = myIndex.sub(allIndexes[j]);\n      tempLower = tempLower.umod(ecCurve.curve.n);\n      lower = lower.mul(tempLower).umod(ecCurve.curve.n);\n    }\n  }\n  return upper.mul(lower.invm(ecCurve.curve.n)).umod(ecCurve.curve.n);\n}\n","import {\n  decrypt,\n  ecCurve,\n  EncryptedMessage,\n  FactorEnc,\n  getPubKeyPoint,\n  IMetadata,\n  Point,\n  PolyIDAndShares,\n  Polynomial,\n  PolynomialID,\n  PublicPolynomial,\n  PublicPolynomialMap,\n  PublicShare,\n  PublicSharePolyIDShareIndexMap,\n  Share,\n  ShareDescriptionMap,\n  ShareMap,\n  ShareStore,\n  StringifiedType,\n  toPrivKeyECC,\n} from \"@tkey/common-types\";\nimport BN from \"bn.js\";\nimport stringify from \"json-stable-stringify\";\n\nimport CoreError from \"./errors\";\nimport { polyCommitmentEval } from \"./lagrangeInterpolatePolynomial\";\n\nclass Metadata implements IMetadata {\n  pubKey: Point;\n\n  publicPolynomials: PublicPolynomialMap;\n\n  publicShares: PublicSharePolyIDShareIndexMap;\n\n  // Tuple of PolyID and array of ShareIndexes\n  polyIDList: PolyIDAndShares[];\n\n  generalStore: {\n    [moduleName: string]: unknown;\n  };\n\n  tkeyStore: {\n    [moduleName: string]: unknown;\n  };\n\n  scopedStore: {\n    [moduleName: string]: unknown;\n  };\n\n  nonce: number;\n\n  tssNonces?: {\n    [tssTag: string]: number;\n  };\n\n  tssPolyCommits?: {\n    [tssTag: string]: Point[];\n  };\n\n  factorPubs?: {\n    [tssTag: string]: Point[];\n  };\n\n  factorEncs?: {\n    [tssTag: string]: {\n      [factorPubID: string]: FactorEnc;\n    };\n  };\n\n  constructor(input: Point) {\n    this.tssPolyCommits = {};\n    this.tssNonces = {};\n    this.factorPubs = {};\n    this.factorEncs = {};\n    this.publicPolynomials = {};\n    this.publicShares = {};\n    this.generalStore = {};\n    this.tkeyStore = {};\n    this.scopedStore = {};\n    this.pubKey = input;\n    this.polyIDList = [];\n    this.nonce = 0;\n  }\n\n  static fromJSON(value: StringifiedType): Metadata {\n    const { pubKey, polyIDList, generalStore, tkeyStore, scopedStore, nonce, tssNonces, tssPolyCommits, factorPubs, factorEncs } = value;\n    const point = Point.fromCompressedPub(pubKey);\n    const metadata = new Metadata(point);\n    const unserializedPolyIDList: PolyIDAndShares[] = [];\n\n    if (generalStore) metadata.generalStore = generalStore;\n    if (tkeyStore) metadata.tkeyStore = tkeyStore;\n    if (scopedStore) metadata.scopedStore = scopedStore;\n    if (nonce) metadata.nonce = nonce;\n    if (tssPolyCommits) {\n      metadata.tssPolyCommits = {};\n      for (const key in tssPolyCommits) {\n        metadata.tssPolyCommits[key] = tssPolyCommits[key].map((obj) => new Point(obj.x, obj.y));\n      }\n    }\n    if (tssNonces) {\n      metadata.tssNonces = {};\n      for (const key in tssNonces) {\n        metadata.tssNonces[key] = tssNonces[key];\n      }\n    }\n    if (factorPubs) {\n      metadata.factorPubs = {};\n      for (const key in factorPubs) {\n        metadata.factorPubs[key] = factorPubs[key].map((obj) => new Point(obj.x, obj.y));\n      }\n    }\n    if (factorEncs) metadata.factorEncs = factorEncs;\n\n    for (let i = 0; i < polyIDList.length; i += 1) {\n      const serializedPolyID: string = polyIDList[i];\n      const arrPolyID = serializedPolyID.split(\"|\");\n      const zeroIndex = arrPolyID.findIndex((v) => v === \"0x0\");\n      const firstHalf = arrPolyID.slice(0, zeroIndex);\n      const secondHalf = arrPolyID.slice(zeroIndex + 1, arrPolyID.length);\n      // for publicPolynomials\n      const pubPolyID = firstHalf.join(\"|\");\n      const pointCommitments = [];\n      firstHalf.forEach((compressedCommitment) => {\n        pointCommitments.push(Point.fromCompressedPub(compressedCommitment));\n      });\n      const publicPolynomial = new PublicPolynomial(pointCommitments);\n      metadata.publicPolynomials[pubPolyID] = publicPolynomial;\n\n      // for polyIDList\n      unserializedPolyIDList.push([pubPolyID, secondHalf]);\n    }\n\n    metadata.polyIDList = unserializedPolyIDList;\n    return metadata;\n  }\n\n  getShareIndexesForPolynomial(polyID: PolynomialID): Array<string> {\n    const matchingPolyIDs = this.polyIDList.filter((tuple) => tuple[0] === polyID);\n    if (matchingPolyIDs.length < 1) {\n      throw CoreError.default(\"there is no matching polyID\");\n    } else if (matchingPolyIDs.length > 1) {\n      throw CoreError.default(\"there is more than one matching polyID\");\n    }\n    return matchingPolyIDs[0][1];\n  }\n\n  getLatestPublicPolynomial(): PublicPolynomial {\n    return this.publicPolynomials[this.polyIDList[this.polyIDList.length - 1][0]];\n  }\n\n  addPublicShare(polynomialID: PolynomialID, publicShare: PublicShare): void {\n    if (!(polynomialID in this.publicShares)) {\n      this.publicShares[polynomialID] = {};\n    }\n    this.publicShares[polynomialID][publicShare.shareIndex.toString(\"hex\")] = publicShare;\n  }\n\n  // getPublicShare(polynomialID: PolynomialID, shareIndex: BN): PublicShare {\n\n  // }\n\n  setGeneralStoreDomain(key: string, obj: unknown): void {\n    this.generalStore[key] = obj;\n  }\n\n  getGeneralStoreDomain(key: string): unknown {\n    return this.generalStore[key];\n  }\n\n  deleteGeneralStoreDomain(key: string): void {\n    delete this.generalStore[key];\n  }\n\n  setTkeyStoreDomain(key: string, arr: unknown): void {\n    this.tkeyStore[key] = arr;\n  }\n\n  getTkeyStoreDomain(key: string): unknown {\n    return this.tkeyStore[key];\n  }\n\n  addTSSData(tssData: {\n    tssTag: string;\n    tssNonce?: number;\n    tssPolyCommits?: Point[];\n    factorPubs?: Point[];\n    factorEncs?: {\n      [factorPubID: string]: FactorEnc;\n    };\n  }): void {\n    const { tssTag, tssNonce, tssPolyCommits, factorPubs, factorEncs } = tssData;\n    if (tssNonce !== undefined) this.tssNonces[tssTag] = tssNonce;\n    if (tssPolyCommits) this.tssPolyCommits[tssTag] = tssPolyCommits;\n    if (factorPubs) this.factorPubs[tssTag] = factorPubs;\n    if (factorEncs) this.factorEncs[tssTag] = factorEncs;\n  }\n\n  // appends shares and public polynomial to metadata.\n  // should represent a generation of share or edit of threshold\n  addFromPolynomialAndShares(polynomial: Polynomial, shares: Share[] | ShareMap): void {\n    const publicPolynomial = polynomial.getPublicPolynomial();\n    const polyID = publicPolynomial.getPolynomialID();\n    this.publicPolynomials[polyID] = publicPolynomial;\n\n    const shareIndexArr = [];\n    if (Array.isArray(shares)) {\n      for (let i = 0; i < shares.length; i += 1) {\n        this.addPublicShare(publicPolynomial.getPolynomialID(), shares[i].getPublicShare());\n        shareIndexArr.push(shares[i].shareIndex.toString(\"hex\"));\n      }\n    } else {\n      for (const k in shares) {\n        if (Object.prototype.hasOwnProperty.call(shares, k)) {\n          this.addPublicShare(publicPolynomial.getPolynomialID(), shares[k].getPublicShare());\n          shareIndexArr.push(shares[k].shareIndex.toString(\"hex\"));\n        }\n      }\n    }\n    this.polyIDList.push([polyID, shareIndexArr]);\n  }\n\n  setScopedStore(domain: string, data: unknown): void {\n    this.scopedStore[domain] = data;\n  }\n\n  async getEncryptedShare(shareStore: ShareStore): Promise<ShareStore> {\n    const pubShare = shareStore.share.getPublicShare();\n    const encryptedShareStore = this.scopedStore.encryptedShares;\n    if (!encryptedShareStore) {\n      throw CoreError.encryptedShareStoreUnavailable(`${shareStore}`);\n    }\n    const encryptedShare = encryptedShareStore[pubShare.shareCommitment.x.toString(\"hex\")];\n    if (!encryptedShare) {\n      throw CoreError.encryptedShareStoreUnavailable(`${shareStore}`);\n    }\n    const rawDecrypted = await decrypt(toPrivKeyECC(shareStore.share.share), encryptedShare as EncryptedMessage);\n    return ShareStore.fromJSON(JSON.parse(rawDecrypted.toString()));\n  }\n\n  getShareDescription(): ShareDescriptionMap {\n    return this.getGeneralStoreDomain(\"shareDescriptions\") as ShareDescriptionMap;\n  }\n\n  addShareDescription(shareIndex: string, description: string): void {\n    const currentSD = this.getGeneralStoreDomain(\"shareDescriptions\") || {};\n    if (currentSD[shareIndex]) {\n      currentSD[shareIndex].push(description);\n    } else {\n      currentSD[shareIndex] = [description];\n    }\n    this.setGeneralStoreDomain(\"shareDescriptions\", currentSD);\n  }\n\n  deleteShareDescription(shareIndex: string, description: string): void {\n    const currentSD = this.getGeneralStoreDomain(\"shareDescriptions\");\n    const index = currentSD[shareIndex].indexOf(description);\n    if (index > -1) {\n      currentSD[shareIndex].splice(index, 1);\n    } else {\n      throw CoreError.default(`No share description found for the given shareIndex: ${shareIndex} \n        and description: ${description}`);\n    }\n  }\n\n  updateShareDescription(shareIndex: string, oldDescription: string, newDescription: string): void {\n    const currentSD = this.getGeneralStoreDomain(\"shareDescriptions\");\n    const index = currentSD[shareIndex].indexOf(oldDescription);\n    if (index > -1) {\n      currentSD[shareIndex][index] = newDescription;\n    } else {\n      throw CoreError.default(`No share description found for the given shareIndex:\n        ${shareIndex} and description: ${oldDescription}`);\n    }\n  }\n\n  shareToShareStore(share: BN): ShareStore {\n    const pubkey = getPubKeyPoint(share);\n    let returnShare: ShareStore;\n\n    for (let i = this.polyIDList.length - 1; i >= 0; i -= 1) {\n      const el = this.polyIDList[i][0];\n\n      for (let t = 0; t < this.polyIDList[i][1].length; t += 1) {\n        const shareIndex = this.polyIDList[i][1][t];\n        // find pubshare in cache if its there\n        let pubShare: PublicShare;\n        if (this.publicShares[el]) {\n          if (this.publicShares[el][shareIndex]) {\n            pubShare = this.publicShares[el][shareIndex];\n          }\n        }\n\n        // if not reconstruct\n        if (!pubShare) {\n          pubShare = new PublicShare(shareIndex, polyCommitmentEval(this.publicPolynomials[el].polynomialCommitments, new BN(shareIndex, \"hex\")));\n        }\n        if (pubShare.shareCommitment.x.eq(pubkey.x) && pubShare.shareCommitment.y.eq(pubkey.y)) {\n          const tempShare = new Share(pubShare.shareIndex, share);\n          return new ShareStore(tempShare, el);\n        }\n      }\n    }\n    if (!returnShare) {\n      throw CoreError.fromCode(1307);\n    }\n    return returnShare;\n  }\n\n  clone(): Metadata {\n    return Metadata.fromJSON(JSON.parse(stringify(this)));\n  }\n\n  toJSON(): StringifiedType {\n    // squash data to serialized polyID according to spec\n    const serializedPolyIDList = [];\n    for (let i = 0; i < this.polyIDList.length; i += 1) {\n      const polyID = this.polyIDList[i][0];\n      const shareIndexes = this.polyIDList[i][1];\n      const sortedShareIndexes = shareIndexes.sort((a: string, b: string) => new BN(a, \"hex\").cmp(new BN(b, \"hex\")));\n      const serializedPolyID = polyID\n        .split(`|`)\n        .concat(\"0x0\")\n        .concat(...sortedShareIndexes)\n        .join(\"|\");\n      serializedPolyIDList.push(serializedPolyID);\n    }\n\n    return {\n      pubKey: this.pubKey.encode(\"elliptic-compressed\", { ec: ecCurve }).toString(),\n      polyIDList: serializedPolyIDList,\n      scopedStore: this.scopedStore,\n      generalStore: this.generalStore,\n      tkeyStore: this.tkeyStore,\n      nonce: this.nonce,\n      ...(this.tssNonces && { tssNonces: this.tssNonces }),\n      ...(this.tssPolyCommits && { tssPolyCommits: this.tssPolyCommits }),\n      ...(this.factorPubs && { factorPubs: this.factorPubs }),\n      ...(this.factorEncs && { factorEncs: this.factorEncs }),\n    };\n  }\n}\n\nexport default Metadata;\n","import { ecCurve, IAuthMetadata, StringifiedType, stripHexPrefix, toPrivKeyEC } from \"@tkey/common-types\";\nimport BN from \"bn.js\";\nimport stringify from \"json-stable-stringify\";\nimport { keccak256 } from \"web3-utils\";\n\nimport CoreError from \"./errors\";\nimport Metadata from \"./metadata\";\n\nclass AuthMetadata implements IAuthMetadata {\n  metadata: Metadata;\n\n  privKey: BN;\n\n  constructor(metadata: Metadata, privKey?: BN) {\n    this.metadata = metadata;\n    this.privKey = privKey;\n  }\n\n  static fromJSON(value: StringifiedType): AuthMetadata {\n    const { data, sig } = value;\n\n    const m = Metadata.fromJSON(data);\n    if (!m.pubKey) throw CoreError.metadataPubKeyUnavailable();\n\n    const pubK = ecCurve.keyFromPublic({ x: m.pubKey.x.toString(\"hex\", 64), y: m.pubKey.y.toString(\"hex\", 64) }, \"hex\");\n    if (!pubK.verify(stripHexPrefix(keccak256(stringify(data))), sig)) {\n      throw CoreError.default(\"Signature not valid for returning metadata\");\n    }\n    return new AuthMetadata(m);\n  }\n\n  toJSON(): StringifiedType {\n    const data = this.metadata;\n\n    if (!this.privKey) throw CoreError.privKeyUnavailable();\n    const k = toPrivKeyEC(this.privKey);\n    const sig = k.sign(stripHexPrefix(keccak256(stringify(data))));\n\n    return {\n      data,\n      sig: sig.toDER(\"hex\"),\n    };\n  }\n}\n\nexport default AuthMetadata;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/typeof\");","import {\n  BNString,\n  CatchupToLatestShareResult,\n  decrypt,\n  DeleteShareResult,\n  ecCurve,\n  ecPoint,\n  encrypt,\n  EncryptedMessage,\n  FactorEnc,\n  FromJSONConstructor,\n  GenerateNewShareResult,\n  generatePrivateExcludingIndexes,\n  getPubKeyECC,\n  getPubKeyPoint,\n  hexPoint,\n  IMessageMetadata,\n  IMetadata,\n  InitializeNewKeyResult,\n  InitializeNewTSSKeyResult,\n  IServiceProvider,\n  IStorageLayer,\n  ITKey,\n  ITKeyApi,\n  KEY_NOT_FOUND,\n  KeyDetails,\n  LocalMetadataTransitions,\n  LocalTransitionData,\n  LocalTransitionShares,\n  ModuleMap,\n  ONE_KEY_DELETE_NONCE,\n  Point,\n  PointHex,\n  Polynomial,\n  PolynomialID,\n  prettyPrintError,\n  randomSelection,\n  ReconstructedKeyResult,\n  ReconstructKeyMiddlewareMap,\n  RefreshMiddlewareMap,\n  RefreshSharesResult,\n  RSSClient,\n  Share,\n  SHARE_DELETED,\n  ShareSerializationMiddleware,\n  ShareStore,\n  ShareStoreMap,\n  ShareStorePolyIDShareIndexMap,\n  StringifiedType,\n  TKeyArgs,\n  TkeyStoreItemType,\n  toPrivKeyECC,\n} from \"@tkey/common-types\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport BN from \"bn.js\";\nimport stringify from \"json-stable-stringify\";\n\nimport AuthMetadata from \"./authMetadata\";\nimport CoreError from \"./errors\";\nimport {\n  dotProduct,\n  generateRandomPolynomial,\n  getLagrangeCoeffs,\n  kCombinations,\n  lagrangeInterpolatePolynomial,\n  lagrangeInterpolation,\n} from \"./lagrangeInterpolatePolynomial\";\nimport Metadata from \"./metadata\";\n\n// TODO: handle errors for get and set with retries\n\nclass ThresholdKey implements ITKey {\n  modules: ModuleMap;\n\n  enableLogging: boolean;\n\n  serviceProvider: IServiceProvider;\n\n  storageLayer: IStorageLayer;\n\n  shares: ShareStorePolyIDShareIndexMap;\n\n  privKey: BN;\n\n  lastFetchedCloudMetadata: Metadata;\n\n  metadata: Metadata;\n\n  manualSync: boolean;\n\n  tssTag: string;\n\n  _localMetadataTransitions: LocalMetadataTransitions;\n\n  _refreshMiddleware: RefreshMiddlewareMap;\n\n  _reconstructKeyMiddleware: ReconstructKeyMiddlewareMap;\n\n  _shareSerializationMiddleware: ShareSerializationMiddleware;\n\n  storeDeviceShare: (deviceShareStore: ShareStore, customDeviceInfo?: StringifiedType) => Promise<void>;\n\n  haveWriteMetadataLock: string;\n\n  constructor(args?: TKeyArgs) {\n    const { enableLogging = false, modules = {}, serviceProvider, storageLayer, manualSync = false, tssTag } = args || {};\n    this.enableLogging = enableLogging;\n    this.serviceProvider = serviceProvider;\n    this.storageLayer = storageLayer;\n    this.modules = modules;\n    this.shares = {};\n    this.privKey = undefined;\n    this.manualSync = manualSync;\n    this._refreshMiddleware = {};\n    this._reconstructKeyMiddleware = {};\n    this._shareSerializationMiddleware = undefined;\n    this.storeDeviceShare = undefined;\n    this._localMetadataTransitions = [[], []];\n    this.setModuleReferences(); // Providing ITKeyApi access to modules\n    this.haveWriteMetadataLock = \"\";\n    this.tssTag = tssTag || \"default\";\n  }\n\n  static async fromJSON(value: StringifiedType, args: TKeyArgs): Promise<ThresholdKey> {\n    const { enableLogging, privKey, metadata, shares, _localMetadataTransitions, manualSync, lastFetchedCloudMetadata, tssTag } = value;\n    const { storageLayer, serviceProvider, modules } = args;\n\n    const tb = new ThresholdKey({\n      tssTag,\n      enableLogging,\n      storageLayer,\n      serviceProvider,\n      modules,\n      manualSync,\n    });\n    if (privKey) tb.privKey = new BN(privKey, \"hex\");\n\n    for (const key in shares) {\n      if (Object.prototype.hasOwnProperty.call(shares, key)) {\n        const shareStoreMapElement = shares[key];\n        for (const shareElementKey in shareStoreMapElement) {\n          if (Object.prototype.hasOwnProperty.call(shareStoreMapElement, shareElementKey)) {\n            const shareStore = shareStoreMapElement[shareElementKey];\n            shareStoreMapElement[shareElementKey] = ShareStore.fromJSON(shareStore);\n          }\n        }\n      }\n    }\n    tb.shares = shares;\n\n    // switch to deserialize local metadata transition based on Object.keys() of authMetadata, ShareStore's and, IMessageMetadata\n    const AuthMetadataKeys = Object.keys(JSON.parse(stringify(new AuthMetadata(new Metadata(new Point(\"0\", \"0\")), new BN(\"0\", \"hex\")))));\n    const ShareStoreKeys = Object.keys(JSON.parse(stringify(new ShareStore(new Share(\"0\", \"0\"), \"\"))));\n    const sampleMessageMetadata: IMessageMetadata = { message: \"Sample message\", dateAdded: Date.now() };\n    const MessageMetadataKeys = Object.keys(sampleMessageMetadata);\n\n    const localTransitionShares: LocalTransitionShares = [];\n    const localTransitionData: LocalTransitionData = [];\n\n    _localMetadataTransitions[0].forEach((x, index) => {\n      if (x) {\n        localTransitionShares.push(new BN(x, \"hex\"));\n      } else {\n        localTransitionShares.push(undefined);\n      }\n\n      const keys = Object.keys(_localMetadataTransitions[1][index]);\n      if (keys.length === AuthMetadataKeys.length && keys.every((val) => AuthMetadataKeys.includes(val))) {\n        const tempAuth = AuthMetadata.fromJSON(_localMetadataTransitions[1][index]);\n        tempAuth.privKey = privKey;\n        localTransitionData.push(tempAuth);\n      } else if (keys.length === ShareStoreKeys.length && keys.every((val) => ShareStoreKeys.includes(val))) {\n        localTransitionData.push(ShareStore.fromJSON(_localMetadataTransitions[1][index]));\n      } else if (keys.length === MessageMetadataKeys.length && keys.every((val) => MessageMetadataKeys.includes(val))) {\n        localTransitionData.push(_localMetadataTransitions[1][index] as IMessageMetadata);\n      } else {\n        throw CoreError.default(\"fromJSON failed. Could not deserialise _localMetadataTransitions\");\n      }\n    });\n\n    if (metadata || lastFetchedCloudMetadata) {\n      let tempMetadata: Metadata;\n      let tempCloud: Metadata;\n      let shareToUseForSerialization: ShareStore;\n\n      // if service provider key is missing, we should initialize with one of the existing shares\n      // TODO: fix for deleted share\n      if (tb.serviceProvider.postboxKey.toString(\"hex\") === \"0\") {\n        const latestPolyIDOnCloud = Metadata.fromJSON(lastFetchedCloudMetadata).getLatestPublicPolynomial().getPolynomialID();\n        const shareIndexesExistInSDK = Object.keys(shares[latestPolyIDOnCloud]);\n        const randomIndex = shareIndexesExistInSDK[Math.floor(Math.random() * (shareIndexesExistInSDK.length - 1))];\n        if (shareIndexesExistInSDK.length >= 1) {\n          shareToUseForSerialization = shares[latestPolyIDOnCloud][randomIndex];\n        }\n      }\n      if (metadata) tempMetadata = Metadata.fromJSON(metadata);\n      if (lastFetchedCloudMetadata) tempCloud = Metadata.fromJSON(lastFetchedCloudMetadata);\n      await tb.initialize({\n        neverInitializeNewKey: true,\n        transitionMetadata: tempMetadata,\n        previouslyFetchedCloudMetadata: tempCloud,\n        previousLocalMetadataTransitions: [localTransitionShares, localTransitionData],\n        withShare: shareToUseForSerialization,\n      });\n    } else {\n      await tb.initialize({ neverInitializeNewKey: true });\n    }\n    return tb;\n  }\n\n  getStorageLayer(): IStorageLayer {\n    return this.storageLayer;\n  }\n\n  getMetadata(): IMetadata {\n    if (typeof this.metadata !== \"undefined\") {\n      return this.metadata;\n    }\n\n    throw CoreError.metadataUndefined();\n  }\n\n  async initialize(params?: {\n    withShare?: ShareStore;\n    importKey?: BN;\n    neverInitializeNewKey?: boolean;\n    transitionMetadata?: Metadata;\n    previouslyFetchedCloudMetadata?: Metadata;\n    previousLocalMetadataTransitions?: LocalMetadataTransitions;\n    delete1OutOf1?: boolean;\n    useTSS?: boolean;\n    deviceTSSShare?: BN;\n    deviceTSSIndex?: number;\n    factorPub?: Point;\n  }): Promise<KeyDetails> {\n    // setup initial params/states\n    const p = params || {};\n\n    if (p.delete1OutOf1 && !this.manualSync) throw CoreError.delete1OutOf1OnlyManualSync();\n\n    const {\n      withShare,\n      importKey,\n      neverInitializeNewKey,\n      transitionMetadata,\n      previouslyFetchedCloudMetadata,\n      previousLocalMetadataTransitions,\n      useTSS,\n      deviceTSSShare,\n      factorPub,\n      deviceTSSIndex,\n    } = p;\n\n    if (useTSS && !factorPub) {\n      throw CoreError.default(\"cannot use TSS without providing factor key\");\n    }\n\n    const previousLocalMetadataTransitionsExists =\n      previousLocalMetadataTransitions && previousLocalMetadataTransitions[0].length > 0 && previousLocalMetadataTransitions[1].length > 0;\n    const reinitializing = transitionMetadata && previousLocalMetadataTransitionsExists; // are we reinitializing the SDK?\n    // in the case we're reinitializing whilst newKeyAssign has not been synced\n    const reinitializingWithNewKeyAssign = reinitializing && previouslyFetchedCloudMetadata === undefined;\n\n    let shareStore: ShareStore;\n    if (withShare instanceof ShareStore) {\n      shareStore = withShare;\n    } else if (typeof withShare === \"object\") {\n      shareStore = ShareStore.fromJSON(withShare);\n    } else if (!withShare) {\n      // default to use service provider\n      // first we see if a share has been kept for us\n      const spIncludeLocalMetadataTransitions = reinitializingWithNewKeyAssign;\n      const spLocalMetadataTransitions = reinitializingWithNewKeyAssign ? previousLocalMetadataTransitions : undefined;\n      const rawServiceProviderShare = await this.getGenericMetadataWithTransitionStates({\n        serviceProvider: this.serviceProvider,\n        includeLocalMetadataTransitions: spIncludeLocalMetadataTransitions,\n        _localMetadataTransitions: spLocalMetadataTransitions,\n        fromJSONConstructor: {\n          fromJSON(val: StringifiedType) {\n            return val;\n          },\n        },\n      });\n      const noKeyFound: { message?: string } = rawServiceProviderShare as { message?: string };\n      if (noKeyFound.message === KEY_NOT_FOUND) {\n        if (neverInitializeNewKey) {\n          throw CoreError.default(\"key has not been generated yet\");\n        }\n        // no metadata set, assumes new user\n        await this._initializeNewKey({\n          initializeModules: true,\n          importedKey: importKey,\n          delete1OutOf1: p.delete1OutOf1,\n        });\n        if (useTSS) {\n          const { factorEncs, factorPubs, tssPolyCommits } = await this._initializeNewTSSKey(this.tssTag, deviceTSSShare, factorPub, deviceTSSIndex);\n          this.metadata.addTSSData({ tssTag: this.tssTag, tssNonce: 0, tssPolyCommits, factorPubs, factorEncs });\n        }\n        return this.getKeyDetails();\n      }\n      // else we continue with catching up share and metadata\n      shareStore = ShareStore.fromJSON(rawServiceProviderShare);\n    } else {\n      throw CoreError.default(\"Input is not supported\");\n    }\n\n    // We determine the latest metadata on the SDK and if there has been\n    // needed transitions to include\n    let currentMetadata: Metadata;\n    let latestCloudMetadata: Metadata;\n    // we fetch the latest metadata for the account from the share\n    let latestShareDetails: CatchupToLatestShareResult;\n    try {\n      latestShareDetails = await this.catchupToLatestShare({ shareStore });\n    } catch (err) {\n      // check if error is not the undefined error\n      // if so we don't throw immediately incase there is valid transition metadata\n      const noMetadataExistsForShare = err.code === 1503;\n      if (!noMetadataExistsForShare || !reinitializing) {\n        throw err;\n      }\n    }\n\n    // lets check if the cloud metadata has been updated or not from previously if we are reinitializing\n    if (reinitializing && !reinitializingWithNewKeyAssign) {\n      if (previouslyFetchedCloudMetadata.nonce < latestShareDetails.shareMetadata.nonce) {\n        throw CoreError.fromCode(1104);\n      } else if (previouslyFetchedCloudMetadata.nonce > latestShareDetails.shareMetadata.nonce) {\n        throw CoreError.fromCode(1105);\n      }\n      latestCloudMetadata = previouslyFetchedCloudMetadata;\n    } else {\n      latestCloudMetadata = latestShareDetails ? latestShareDetails.shareMetadata.clone() : undefined;\n    }\n\n    // If we've been provided with transition metadata we use that as the current metadata instead\n    // as we want to maintain state before and after serialization.\n    // (Given that the checks for cloud metadata pass)\n    if (reinitializing) {\n      currentMetadata = transitionMetadata;\n      this._localMetadataTransitions = previousLocalMetadataTransitions;\n    } else {\n      currentMetadata = latestShareDetails.shareMetadata;\n    }\n\n    this.lastFetchedCloudMetadata = latestCloudMetadata;\n    this.metadata = currentMetadata;\n    const latestShare = latestShareDetails ? latestShareDetails.latestShare : shareStore;\n    this.inputShareStore(latestShare);\n\n    // initialize modules\n    await this.initializeModules();\n\n    if (useTSS) {\n      if (!this.metadata.tssPolyCommits[this.tssTag]) {\n        // if tss shares have not been created for this tssTag, create new tss sharing\n        await this._initializeNewTSSKey(this.tssTag, deviceTSSShare, factorPub);\n      }\n    }\n\n    return this.getKeyDetails();\n  }\n\n  getFactorEncs(factorPub: Point): FactorEnc {\n    if (!this.metadata) throw CoreError.metadataUndefined();\n    if (!this.metadata.factorEncs) throw CoreError.default(\"no factor encs mapping\");\n    if (!this.metadata.factorPubs) throw CoreError.default(\"no factor pubs mapping\");\n    const factorPubs = this.metadata.factorPubs[this.tssTag];\n    if (!factorPubs) throw CoreError.default(`no factor pubs for this tssTag ${this.tssTag}`);\n    if (factorPubs.filter((f) => f.x.cmp(factorPub.x) === 0 && f.y.cmp(factorPub.y) === 0).length === 0)\n      throw CoreError.default(`factor pub ${factorPub} not found for tssTag ${this.tssTag}`);\n    if (!this.metadata.factorEncs[this.tssTag]) throw CoreError.default(`no factor encs for tssTag ${this.tssTag}`);\n    const factorPubID = factorPub.x.toString(16, 64);\n    return this.metadata.factorEncs[this.tssTag][factorPubID];\n  }\n\n  /**\n   * getTSSShare accepts a factorKey and returns the TSS share based on the factor encrypted TSS shares in the metadata\n   * @param factorKey - factor key\n   */\n  async getTSSShare(factorKey: BN, opts?: { threshold: number }): Promise<{ tssIndex: number; tssShare: BN }> {\n    if (!this.privKey) throw CoreError.default(\"tss share cannot be returned until you've reconstructed tkey\");\n    const factorPub = getPubKeyPoint(factorKey);\n    const factorEncs = this.getFactorEncs(factorPub);\n    const { userEnc, serverEncs, tssIndex, type } = factorEncs;\n    const userDecryption = await decrypt(Buffer.from(factorKey.toString(16, 64), \"hex\"), userEnc);\n    const serverDecryptions = await Promise.all(\n      serverEncs.map((factorEnc) => {\n        if (factorEnc === null) return null;\n        return decrypt(Buffer.from(factorKey.toString(16, 64), \"hex\"), factorEnc);\n      })\n    );\n    const tssShareBufs = [userDecryption].concat(serverDecryptions);\n\n    const tssShareBNs = tssShareBufs.map((buf) => {\n      if (buf === null) return null;\n      return new BN(buf.toString(\"hex\"), \"hex\");\n    });\n    const tssCommits = this.getTSSCommits();\n\n    const userDec = tssShareBNs[0];\n\n    if (type === \"direct\") {\n      const tssSharePub = ecCurve.g.mul(userDec);\n      const tssCommitA0 = ecCurve.keyFromPublic({ x: tssCommits[0].x.toString(16, 64), y: tssCommits[0].y.toString(16, 64) }).getPublic();\n      const tssCommitA1 = ecCurve.keyFromPublic({ x: tssCommits[1].x.toString(16, 64), y: tssCommits[1].y.toString(16, 64) }).getPublic();\n      let _tssSharePub = tssCommitA0;\n      for (let j = 0; j < tssIndex; j++) {\n        _tssSharePub = _tssSharePub.add(tssCommitA1);\n      }\n      if (tssSharePub.getX().cmp(_tssSharePub.getX()) === 0 && tssSharePub.getY().cmp(_tssSharePub.getY()) === 0) {\n        return { tssIndex, tssShare: userDec };\n      }\n      throw new Error(\"user decryption does not match tss commitments...\");\n    }\n\n    // if type === \"hierarchical\"\n    const serverDecs = tssShareBNs.slice(1); // 5 elems\n    const serverIndexes = new Array(serverDecs.length).fill(null).map((_, i) => i + 1);\n\n    const { threshold } = opts || {};\n\n    const combis = kCombinations(serverDecs.length, threshold || Math.ceil(serverDecs.length / 2));\n    for (let i = 0; i < combis.length; i++) {\n      const combi = combis[i];\n      const selectedServerDecs = serverDecs.filter((_, j) => combi.indexOf(j) > -1);\n      if (selectedServerDecs.includes(null)) continue;\n\n      const selectedServerIndexes = serverIndexes.filter((_, j) => combi.indexOf(j) > -1);\n      const serverLagrangeCoeffs = selectedServerIndexes.map((x) => getLagrangeCoeffs(selectedServerIndexes, x));\n      const serverInterpolated = dotProduct(serverLagrangeCoeffs, selectedServerDecs, ecCurve.n);\n      const lagrangeCoeffs = [getLagrangeCoeffs([1, 99], 1), getLagrangeCoeffs([1, 99], 99)];\n      const tssShare = dotProduct(lagrangeCoeffs, [serverInterpolated, userDec], ecCurve.n);\n      const tssSharePub = ecCurve.g.mul(tssShare);\n      const tssCommitA0 = ecCurve.keyFromPublic({ x: tssCommits[0].x.toString(16, 64), y: tssCommits[0].y.toString(16, 64) }).getPublic();\n      const tssCommitA1 = ecCurve.keyFromPublic({ x: tssCommits[1].x.toString(16, 64), y: tssCommits[1].y.toString(16, 64) }).getPublic();\n      let _tssSharePub = tssCommitA0;\n      for (let j = 0; j < tssIndex; j++) {\n        _tssSharePub = _tssSharePub.add(tssCommitA1);\n      }\n      if (tssSharePub.getX().cmp(_tssSharePub.getX()) === 0 && tssSharePub.getY().cmp(_tssSharePub.getY()) === 0) {\n        return { tssIndex, tssShare };\n      }\n    }\n    throw new Error(\"could not find any combination of server decryptions that match tss commitments...\");\n  }\n\n  getTSSCommits(): Point[] {\n    if (!this.privKey) throw CoreError.default(\"tss pub cannot be returned until you've reconstructed tkey\");\n    if (!this.metadata) throw CoreError.metadataUndefined();\n    const tssPolyCommits = this.metadata.tssPolyCommits[this.tssTag];\n    if (!tssPolyCommits) throw CoreError.default(`tss poly commits not found for tssTag ${this.tssTag}`);\n    if (tssPolyCommits.length === 0) throw CoreError.default(\"tss poly commits is empty\");\n    return tssPolyCommits;\n  }\n\n  getTSSPub(): Point {\n    return this.getTSSCommits()[0];\n  }\n\n  /**\n   * catchupToLatestShare recursively loops fetches metadata of the provided share and checks if there is an encrypted share for it.\n   * @param shareStore - share to start of with\n   * @param polyID - if specified, polyID to refresh to if it exists\n   */\n  async catchupToLatestShare(params: {\n    shareStore: ShareStore;\n    polyID?: PolynomialID;\n    includeLocalMetadataTransitions?: boolean;\n  }): Promise<CatchupToLatestShareResult> {\n    const { shareStore, polyID, includeLocalMetadataTransitions } = params;\n    let shareMetadata: Metadata;\n    try {\n      shareMetadata = await this.getAuthMetadata({ privKey: shareStore.share.share, includeLocalMetadataTransitions });\n    } catch (err) {\n      // delete share error\n      if ((err as CoreError) && err.code === 1308) {\n        throw err;\n      }\n      throw CoreError.authMetadataGetUnavailable(`, ${prettyPrintError(err)}`);\n    }\n\n    try {\n      // if matches specified polyID return it\n      if (polyID) {\n        if (shareStore.polynomialID === polyID) {\n          return { latestShare: shareStore, shareMetadata };\n        }\n      }\n      const nextShare = await shareMetadata.getEncryptedShare(shareStore);\n      return await this.catchupToLatestShare({ shareStore: nextShare, polyID, includeLocalMetadataTransitions });\n    } catch (err) {\n      // delete share error\n      if ((err as CoreError) && err.code === 1308) {\n        throw err;\n      }\n      return { latestShare: shareStore, shareMetadata };\n    }\n  }\n\n  async reconstructKey(_reconstructKeyMiddleware = true): Promise<ReconstructedKeyResult> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const requiredThreshold = pubPoly.getThreshold();\n    const pubPolyID = pubPoly.getPolynomialID();\n\n    // check if we have enough shares to meet threshold\n    let sharesLeft = requiredThreshold;\n    // we don't just check the latest poly but\n    // we check if the shares on previous polynomials in our stores have the share indexes we require\n    const fullShareList = this.metadata.getShareIndexesForPolynomial(pubPolyID);\n    const shareIndexesRequired = {};\n    for (let i = 0; i < fullShareList.length; i += 1) {\n      shareIndexesRequired[fullShareList[i]] = true;\n    }\n    const sharesToInput = [];\n    for (let z = this.metadata.polyIDList.length - 1; z >= 0 && sharesLeft > 0; z -= 1) {\n      const sharesForPoly = this.shares[this.metadata.polyIDList[z][0]];\n      if (sharesForPoly) {\n        const shareIndexesForPoly = Object.keys(sharesForPoly);\n        for (let k = 0; k < shareIndexesForPoly.length && sharesLeft > 0; k += 1) {\n          if (shareIndexesForPoly[k] in shareIndexesRequired) {\n            const currentShareForPoly = sharesForPoly[shareIndexesForPoly[k]];\n            if (currentShareForPoly.polynomialID === pubPolyID) {\n              sharesToInput.push(currentShareForPoly);\n            } else {\n              const latestShareRes = await this.catchupToLatestShare({\n                shareStore: currentShareForPoly,\n                polyID: pubPolyID,\n                includeLocalMetadataTransitions: true,\n              });\n              if (latestShareRes.latestShare.polynomialID === pubPolyID) {\n                sharesToInput.push(latestShareRes.latestShare);\n              } else {\n                throw new CoreError(1304, \"Share found in unexpected polynomial\"); // Share found in unexpected polynomial\n              }\n            }\n            delete shareIndexesRequired[shareIndexesForPoly[k]];\n            sharesLeft -= 1;\n          }\n        }\n      }\n    }\n\n    // Input shares to ensure atomicity\n    sharesToInput.forEach((share) => {\n      this.inputShareStore(share);\n    });\n\n    if (sharesLeft > 0) {\n      throw CoreError.unableToReconstruct(` require ${requiredThreshold} but have ${requiredThreshold - sharesLeft}`);\n    }\n\n    const polyShares = Object.keys(this.shares[pubPolyID]);\n    const shareArr = [];\n    const shareIndexArr = [];\n    for (let i = 0; i < requiredThreshold; i += 1) {\n      shareArr.push(this.shares[pubPolyID][polyShares[i]].share.share);\n      shareIndexArr.push(this.shares[pubPolyID][polyShares[i]].share.shareIndex);\n    }\n    const privKey = lagrangeInterpolation(shareArr, shareIndexArr);\n    // check that priv key regenerated is correct\n    const reconstructedPubKey = getPubKeyPoint(privKey);\n    if (this.metadata.pubKey.x.cmp(reconstructedPubKey.x) !== 0) {\n      throw CoreError.incorrectReconstruction();\n    }\n    this._setKey(privKey);\n\n    const returnObject = {\n      privKey,\n      allKeys: [privKey],\n    };\n\n    if (_reconstructKeyMiddleware && Object.keys(this._reconstructKeyMiddleware).length > 0) {\n      // retireve/reconstruct extra keys that live on metadata\n      await Promise.all(\n        Object.keys(this._reconstructKeyMiddleware).map(async (x) => {\n          if (Object.prototype.hasOwnProperty.call(this._reconstructKeyMiddleware, x)) {\n            const extraKeys = await this._reconstructKeyMiddleware[x]();\n            returnObject[x] = extraKeys;\n            returnObject.allKeys.push(...extraKeys);\n          }\n        })\n      );\n    }\n    return returnObject;\n  }\n\n  reconstructLatestPoly(): Polynomial {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const pubPolyID = pubPoly.getPolynomialID();\n    const threshold = pubPoly.getThreshold();\n\n    const pointsArr = [];\n    const sharesForExistingPoly = Object.keys(this.shares[pubPolyID]);\n    if (sharesForExistingPoly.length < threshold) {\n      throw CoreError.unableToReconstruct(\"not enough shares to reconstruct poly\");\n    }\n    if (new Set(sharesForExistingPoly).size !== sharesForExistingPoly.length) {\n      throw CoreError.default(\"share indexes should be unique\");\n    }\n    for (let i = 0; i < threshold; i += 1) {\n      pointsArr.push(new Point(new BN(sharesForExistingPoly[i], \"hex\"), this.shares[pubPolyID][sharesForExistingPoly[i]].share.share));\n    }\n    return lagrangeInterpolatePolynomial(pointsArr);\n  }\n\n  async deleteShare(\n    shareIndex: BNString,\n    useTSS?: boolean,\n    tssOptions?: {\n      inputTSSShare: BN;\n      inputTSSIndex: number;\n      factorPub: Point;\n      authSignatures: string[];\n      selectedServers?: number[];\n    }\n  ): Promise<DeleteShareResult> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    if (useTSS && !tssOptions) {\n      throw CoreError.default(\"cannot useTSS if tssOptions is empty\");\n    }\n    const shareIndexToDelete = new BN(shareIndex, \"hex\");\n    const shareToDelete = this.outputShareStore(shareIndexToDelete);\n    if (shareIndexToDelete.cmp(new BN(\"1\", \"hex\")) === 0) {\n      throw new CoreError(1001, \"Unable to delete service provider share\");\n    }\n\n    // Get existing shares\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const previousPolyID = pubPoly.getPolynomialID();\n    const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(previousPolyID);\n    const newShareIndexes = [];\n    existingShareIndexes.forEach((el) => {\n      const bn = new BN(el, \"hex\");\n      if (bn.cmp(shareIndexToDelete) !== 0) {\n        newShareIndexes.push(bn.toString(\"hex\"));\n      }\n    });\n\n    // Update shares\n    if (existingShareIndexes.length === newShareIndexes.length) {\n      throw CoreError.default(\"Share index does not exist in latest polynomial\");\n    } else if (newShareIndexes.length < pubPoly.getThreshold()) {\n      throw CoreError.default(`Minimum ${pubPoly.getThreshold()} shares are required for tkey. Unable to delete share`);\n    }\n\n    if (useTSS) {\n      const { factorPub, inputTSSIndex, inputTSSShare, selectedServers, authSignatures } = tssOptions;\n      const existingFactorPubs = this.metadata.factorPubs[this.tssTag];\n\n      const found = existingFactorPubs.filter((f) => f.x.eq(factorPub.x) && f.y.eq(factorPub.y));\n      if (found.length === 0) throw CoreError.default(\"could not find factorPub to delete\");\n      if (found.length > 1) throw CoreError.default(\"found two or more factorPubs that match, error in metadata\");\n      const updatedFactorPubs = existingFactorPubs.filter((f) => !f.x.eq(factorPub.x) || !f.y.eq(factorPub.y));\n      this.metadata.addTSSData({ tssTag: this.tssTag, factorPubs: updatedFactorPubs });\n      const rssNodeDetails = await this._getRssNodeDetails();\n      const randomSelectedServers = randomSelection(\n        new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1),\n        Math.ceil(rssNodeDetails.serverEndpoints.length / 2)\n      );\n\n      const updatedTSSIndexes = updatedFactorPubs.map((fb) => this.getFactorEncs(fb).tssIndex);\n\n      await this._refreshTSSShares(\n        false,\n        inputTSSShare,\n        inputTSSIndex,\n        updatedFactorPubs,\n        updatedTSSIndexes,\n        this.serviceProvider.getVerifierNameVerifierId(),\n        {\n          ...rssNodeDetails,\n          selectedServers: selectedServers || randomSelectedServers,\n          authSignatures,\n        }\n      );\n    }\n\n    const results = await this._refreshShares(pubPoly.getThreshold(), [...newShareIndexes], previousPolyID);\n    const newShareStores = results.shareStores;\n    await this.addLocalMetadataTransitions({ input: [{ message: SHARE_DELETED, dateAdded: Date.now() }], privKey: [shareToDelete.share.share] });\n    return { newShareStores };\n  }\n\n  async _getTSSNodeDetails(): Promise<{ serverEndpoints: string[]; serverPubKeys: PointHex[]; serverThreshold: number }> {\n    const { serverEndpoints, serverPubKeys, serverThreshold } = await this.serviceProvider.getTSSNodeDetails();\n    if (!Array.isArray(serverEndpoints) || serverEndpoints.length === 0) throw new Error(\"service provider tss server endpoints are missing\");\n    if (!Array.isArray(serverPubKeys) || serverPubKeys.length === 0) throw new Error(\"service provider pub keys are missing\");\n    return {\n      serverEndpoints,\n      serverPubKeys,\n      serverThreshold: serverThreshold || Math.floor(serverEndpoints.length / 2) + 1,\n    };\n  }\n\n  async _getRssNodeDetails(): Promise<{ serverEndpoints: string[]; serverPubKeys: PointHex[]; serverThreshold: number }> {\n    const { serverEndpoints, serverPubKeys, serverThreshold } = await this.serviceProvider.getRSSNodeDetails();\n    if (!Array.isArray(serverEndpoints) || serverEndpoints.length === 0) throw new Error(\"service provider tss server endpoints are missing\");\n    if (!Array.isArray(serverPubKeys) || serverPubKeys.length === 0) throw new Error(\"service provider pub keys are missing\");\n    return {\n      serverEndpoints,\n      serverPubKeys,\n      serverThreshold: serverThreshold || Math.floor(serverEndpoints.length / 2) + 1,\n    };\n  }\n\n  async generateNewShare(\n    useTSS?: boolean,\n    tssOptions?: {\n      inputTSSShare: BN;\n      inputTSSIndex: number;\n      newFactorPub: Point;\n      newTSSIndex: number;\n      authSignatures?: string[];\n      selectedServers?: number[];\n    }\n  ): Promise<GenerateNewShareResult> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    if (useTSS) {\n      if (!tssOptions) throw CoreError.default(\"must provide tss options when calling generateNewShare with useTSS true\");\n      if (!this.metadata.tssPolyCommits[this.tssTag]) throw new Error(`tss key has not been initialized for tssTag ${this.tssTag}`);\n      const { newFactorPub, inputTSSIndex, inputTSSShare, newTSSIndex, selectedServers, authSignatures } = tssOptions;\n\n      const existingFactorPubs = this.metadata.factorPubs[this.tssTag];\n      const updatedFactorPubs = existingFactorPubs.concat([newFactorPub]);\n\n      // only modify factorPubs\n      this.metadata.addTSSData({\n        tssTag: this.tssTag,\n        tssNonce: this.metadata.tssNonces[this.tssTag],\n        tssPolyCommits: this.metadata.tssPolyCommits[this.tssTag],\n        factorPubs: updatedFactorPubs,\n        factorEncs: this.metadata.factorEncs[this.tssTag],\n      });\n\n      const verifierId = this.serviceProvider.getVerifierNameVerifierId();\n      const rssNodeDetails = await this._getRssNodeDetails();\n      const randomSelectedServers = randomSelection(\n        new Array(rssNodeDetails.serverEndpoints.length).fill(null).map((_, i) => i + 1),\n        Math.ceil(rssNodeDetails.serverEndpoints.length / 2)\n      );\n\n      const existingTSSIndexes = existingFactorPubs.map((fb) => this.getFactorEncs(fb).tssIndex);\n      const updatedTSSIndexes = existingTSSIndexes.concat([newTSSIndex]);\n\n      await this._refreshTSSShares(false, inputTSSShare, inputTSSIndex, updatedFactorPubs, updatedTSSIndexes, verifierId, {\n        ...rssNodeDetails,\n        selectedServers: selectedServers || randomSelectedServers,\n        authSignatures,\n      });\n    }\n\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const previousPolyID = pubPoly.getPolynomialID();\n    const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(previousPolyID);\n    const existingShareIndexesBN = existingShareIndexes.map((el) => new BN(el, \"hex\"));\n    const newShareIndex = new BN(generatePrivateExcludingIndexes(existingShareIndexesBN));\n\n    const results = await this._refreshShares(pubPoly.getThreshold(), [...existingShareIndexes, newShareIndex.toString(\"hex\")], previousPolyID);\n    const newShareStores = results.shareStores;\n\n    return { newShareStores, newShareIndex };\n  }\n\n  async _refreshTSSShares(\n    updateMetadata: boolean,\n    inputShare: BN,\n    inputIndex: number,\n    factorPubs: Point[],\n    targetIndexes: number[],\n    verifierNameVerifierId: string,\n    serverOpts: {\n      serverEndpoints: string[];\n      serverPubKeys: PointHex[];\n      serverThreshold: number;\n      selectedServers: number[];\n      authSignatures: string[];\n    }\n  ): Promise<void> {\n    if (!this.metadata) throw CoreError.metadataUndefined();\n    if (!this.metadata.tssPolyCommits) throw CoreError.default(`tss poly commits obj not found`);\n    const tssCommits = this.metadata.tssPolyCommits[this.tssTag];\n    if (!tssCommits) throw CoreError.default(`tss commits not found for tssTag ${this.tssTag}`);\n    if (tssCommits.length === 0) throw CoreError.default(`tssCommits is empty`);\n    const tssPubKeyPoint = tssCommits[0];\n    const tssPubKey = hexPoint(tssPubKeyPoint);\n    const { serverEndpoints, serverPubKeys, serverThreshold, selectedServers, authSignatures } = serverOpts;\n\n    const rssClient = new RSSClient({\n      serverEndpoints,\n      serverPubKeys,\n      serverThreshold,\n      tssPubKey,\n    });\n\n    if (!this.metadata.factorPubs) throw CoreError.default(`factorPubs obj not found`);\n    if (!factorPubs) throw CoreError.default(`factorPubs not found for tssTag ${this.tssTag}`);\n    if (factorPubs.length === 0) throw CoreError.default(`factorPubs is empty`);\n\n    if (!this.metadata.tssNonces) throw CoreError.default(`tssNonces obj not found`);\n    const tssNonce: number = this.metadata.tssNonces[this.tssTag] || 0;\n\n    const oldLabel = `${verifierNameVerifierId}\\u0015${this.tssTag}\\u0016${tssNonce}`;\n    const newLabel = `${verifierNameVerifierId}\\u0015${this.tssTag}\\u0016${tssNonce + 1}`;\n\n    const newTSSServerPub = await this.serviceProvider.getTSSPubKey(this.tssTag, tssNonce + 1);\n    // eslint-disable-next-line no-console\n    console.log(\"newTSSServerPub\", newTSSServerPub.x.toString(\"hex\"), this.tssTag, tssNonce + 1);\n    const refreshResponses = await rssClient.refresh({\n      factorPubs: factorPubs.map((f) => hexPoint(f)),\n      targetIndexes,\n      oldLabel,\n      newLabel,\n      sigs: authSignatures,\n      dkgNewPub: hexPoint(newTSSServerPub),\n      inputShare,\n      inputIndex,\n      selectedServers,\n    });\n\n    const secondCommit = ecPoint(hexPoint(newTSSServerPub)).add(ecPoint(tssPubKey).neg());\n    const newTSSCommits = [\n      Point.fromJSON(tssPubKey),\n      Point.fromJSON({ x: secondCommit.getX().toString(16, 64), y: secondCommit.getY().toString(16, 64) }),\n    ];\n    const factorEncs: {\n      [factorPubID: string]: FactorEnc;\n    } = {};\n    for (let i = 0; i < refreshResponses.length; i++) {\n      const refreshResponse = refreshResponses[i];\n      factorEncs[refreshResponse.factorPub.x.padStart(64, \"0\")] = {\n        type: \"hierarchical\",\n        tssIndex: refreshResponse.targetIndex,\n        userEnc: refreshResponse.userFactorEnc,\n        serverEncs: refreshResponse.serverFactorEncs,\n      };\n    }\n\n    this.metadata.addTSSData({ tssTag: this.tssTag, tssNonce: tssNonce + 1, tssPolyCommits: newTSSCommits, factorPubs, factorEncs });\n    if (updateMetadata) await this._syncShareMetadata();\n  }\n\n  async _refreshShares(\n    threshold: number,\n    newShareIndexes: string[],\n    previousPolyID: PolynomialID,\n    useTSS?: boolean,\n    tssIndex?: number,\n    factorPub?: Point\n  ): Promise<RefreshSharesResult> {\n    if (useTSS) {\n      if (!tssIndex) throw CoreError.default(\"useTSS is true but tssIndex is not specified / invalid\");\n      if (!factorPub) throw CoreError.default(\"useTSS is true but factorPub is not specified\");\n    }\n\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    if (threshold > newShareIndexes.length) {\n      throw CoreError.default(`threshold should not be greater than share indexes. ${threshold} > ${newShareIndexes.length}`);\n    }\n\n    // update metadata nonce\n    this.metadata.nonce += 1;\n\n    const poly = generateRandomPolynomial(threshold - 1, this.privKey);\n    const shares = poly.generateShares(newShareIndexes);\n    const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(previousPolyID);\n\n    const pointsArr = [];\n    const sharesForExistingPoly = Object.keys(this.shares[previousPolyID]);\n    if (sharesForExistingPoly.length < threshold) {\n      throw CoreError.unableToReconstruct(\"not enough shares for polynomial reconstruction\");\n    }\n    for (let i = 0; i < threshold; i += 1) {\n      pointsArr.push(new Point(new BN(sharesForExistingPoly[i], \"hex\"), this.shares[previousPolyID][sharesForExistingPoly[i]].share.share));\n    }\n    const oldPoly = lagrangeInterpolatePolynomial(pointsArr);\n\n    const shareIndexesNeedingEncryption: string[] = [];\n    for (let index = 0; index < existingShareIndexes.length; index += 1) {\n      const shareIndexHex = existingShareIndexes[index];\n      // define shares that need encryption/relaying\n      if (newShareIndexes.includes(shareIndexHex)) {\n        shareIndexesNeedingEncryption.push(shareIndexHex);\n      }\n    }\n\n    // add metadata new poly to metadata\n    this.metadata.addFromPolynomialAndShares(poly, shares);\n\n    // change to share stores for public storing\n    const oldShareStores = {};\n    const newShareStores = {};\n    const polyID = poly.getPolynomialID();\n    newShareIndexes.forEach((shareIndexHex) => {\n      newShareStores[shareIndexHex] = new ShareStore(shares[shareIndexHex], polyID);\n    });\n\n    // evaluate oldPoly for old shares and set new metadata with encrypted share for new polynomial\n\n    const m = this.metadata.clone();\n    const newScopedStore = {};\n    const sharesToPush = await Promise.all(\n      shareIndexesNeedingEncryption.map(async (shareIndex) => {\n        const oldShare = oldPoly.polyEval(new BN(shareIndex, \"hex\"));\n        const encryptedShare = await encrypt(getPubKeyECC(oldShare), Buffer.from(JSON.stringify(newShareStores[shareIndex])));\n        newScopedStore[getPubKeyPoint(oldShare).x.toString(\"hex\")] = encryptedShare;\n        oldShareStores[shareIndex] = new ShareStore(new Share(shareIndex, oldShare), previousPolyID);\n        return oldShare;\n      })\n    );\n    m.setScopedStore(\"encryptedShares\", newScopedStore);\n    const metadataToPush = Array(sharesToPush.length).fill(m);\n\n    // run refreshShare middleware\n    // If a shareIndex is left out during refresh shares, we assume that it being explicitly deleted.\n    for (const moduleName in this._refreshMiddleware) {\n      if (Object.prototype.hasOwnProperty.call(this._refreshMiddleware, moduleName)) {\n        const adjustedGeneralStore = this._refreshMiddleware[moduleName](\n          this.metadata.getGeneralStoreDomain(moduleName),\n          oldShareStores,\n          newShareStores\n        );\n        if (!adjustedGeneralStore) this.metadata.deleteGeneralStoreDomain(moduleName);\n        else this.metadata.setGeneralStoreDomain(moduleName, adjustedGeneralStore);\n      }\n    }\n\n    const newShareMetadataToPush = [];\n    const newShareStoreSharesToPush = newShareIndexes.map((shareIndex) => {\n      const me = this.metadata.clone();\n      newShareMetadataToPush.push(me);\n      return newShareStores[shareIndex].share.share;\n    });\n\n    const AuthMetadatas = this.generateAuthMetadata({ input: [...metadataToPush, ...newShareMetadataToPush] });\n\n    // Combine Authmetadata and service provider ShareStore\n    await this.addLocalMetadataTransitions({\n      input: [...AuthMetadatas, newShareStores[\"1\"]],\n      privKey: [...sharesToPush, ...newShareStoreSharesToPush, undefined],\n    });\n\n    // update this.shares with these new shares\n    for (let index = 0; index < newShareIndexes.length; index += 1) {\n      const shareIndex = newShareIndexes[index];\n      this.inputShareStore(newShareStores[shareIndex]);\n    }\n\n    // await this.releaseWriteMetadataLock();\n    return { shareStores: newShareStores };\n  }\n\n  async _initializeNewTSSKey(tssTag: string, deviceTSSShare, factorPub, deviceTSSIndex?): Promise<InitializeNewTSSKeyResult> {\n    let tss2: BN;\n    const _tssIndex = deviceTSSIndex || 2; // TODO: fix\n    if (deviceTSSShare) {\n      tss2 = deviceTSSShare;\n    } else {\n      tss2 = new BN(generatePrivate());\n    }\n    const tss1Pub = await this.serviceProvider.getTSSPubKey(tssTag, 0);\n    const tss1PubKey = ecCurve.keyFromPublic({ x: tss1Pub.x.toString(16, 64), y: tss1Pub.y.toString(16, 64) }).getPublic();\n    const tss2Pub = getPubKeyPoint(tss2);\n    const tss2PubKey = ecCurve.keyFromPublic({ x: tss2Pub.x.toString(16, 64), y: tss2Pub.y.toString(16, 64) }).getPublic();\n\n    const L1_0 = getLagrangeCoeffs([1, _tssIndex], 1, 0);\n    // eslint-disable-next-line camelcase\n    const LIndex_0 = getLagrangeCoeffs([1, _tssIndex], _tssIndex, 0);\n\n    const a0Pub = tss1PubKey.mul(L1_0).add(tss2PubKey.mul(LIndex_0));\n    const a1Pub = tss1PubKey.add(a0Pub.neg());\n\n    const tssPolyCommits = [\n      new Point(a0Pub.getX().toString(16, 64), a0Pub.getY().toString(16, 64)),\n      new Point(a1Pub.getX().toString(16, 64), a1Pub.getY().toString(16, 64)),\n    ];\n    const factorPubs = [factorPub];\n    const factorEncs: { [factorPubID: string]: FactorEnc } = {};\n\n    for (let i = 0; i < factorPubs.length; i++) {\n      const f = factorPubs[i];\n      const factorPubID = f.x.toString(16, 64);\n      factorEncs[factorPubID] = {\n        tssIndex: _tssIndex,\n        type: \"direct\",\n        userEnc: await encrypt(\n          Buffer.concat([Buffer.from(\"04\", \"hex\"), Buffer.from(f.x.toString(16, 64), \"hex\"), Buffer.from(f.y.toString(16, 64), \"hex\")]),\n          Buffer.from(tss2.toString(16, 64), \"hex\")\n        ),\n        serverEncs: [],\n      };\n    }\n\n    return {\n      tss2,\n      factorEncs,\n      factorPubs,\n      tssPolyCommits,\n    };\n  }\n\n  async _initializeNewKey({\n    determinedShare,\n    initializeModules,\n    importedKey,\n    delete1OutOf1,\n  }: {\n    determinedShare?: BN;\n    initializeModules?: boolean;\n    importedKey?: BN;\n    delete1OutOf1?: boolean;\n  } = {}): Promise<InitializeNewKeyResult> {\n    if (!importedKey) {\n      const tmpPriv = generatePrivate();\n      this._setKey(new BN(tmpPriv));\n    } else {\n      this._setKey(new BN(importedKey));\n    }\n\n    // create a random poly and respective shares\n    // 1 is defined as the serviceProvider share\n    // 0 is for tKey\n    const shareIndexForDeviceStorage = generatePrivateExcludingIndexes([new BN(1), new BN(0)]);\n\n    const shareIndexes = [new BN(1), shareIndexForDeviceStorage];\n    let poly: Polynomial;\n    if (determinedShare) {\n      const shareIndexForDeterminedShare = generatePrivateExcludingIndexes([new BN(1), new BN(0)]);\n      poly = generateRandomPolynomial(1, this.privKey, [new Share(shareIndexForDeterminedShare, determinedShare)]);\n      shareIndexes.push(shareIndexForDeterminedShare);\n    } else {\n      poly = generateRandomPolynomial(1, this.privKey);\n    }\n    const shares = poly.generateShares(shareIndexes);\n\n    // create metadata to be stored\n    const metadata = new Metadata(getPubKeyPoint(this.privKey));\n    metadata.addFromPolynomialAndShares(poly, shares);\n\n    const serviceProviderShare = shares[shareIndexes[0].toString(\"hex\")];\n    const shareStore = new ShareStore(serviceProviderShare, poly.getPolynomialID());\n    this.metadata = metadata;\n\n    // initialize modules\n    if (initializeModules) {\n      await this.initializeModules();\n    }\n\n    const metadataToPush = [];\n    const sharesToPush = shareIndexes.map((shareIndex) => {\n      metadataToPush.push(this.metadata);\n      return shares[shareIndex.toString(\"hex\")].share;\n    });\n\n    const authMetadatas = this.generateAuthMetadata({ input: metadataToPush });\n\n    // because this is the first time we're setting metadata there is no need to acquire a lock\n    // acquireLock: false. Force push\n    await this.addLocalMetadataTransitions({ input: [...authMetadatas, shareStore], privKey: [...sharesToPush, undefined] });\n    if (delete1OutOf1) {\n      await this.addLocalMetadataTransitions({ input: [{ message: ONE_KEY_DELETE_NONCE }], privKey: [this.serviceProvider.postboxKey] });\n    }\n\n    // store metadata on metadata respective to shares\n    for (let index = 0; index < shareIndexes.length; index += 1) {\n      const shareIndex = shareIndexes[index];\n      // also add into our share store\n      this.inputShareStore(new ShareStore(shares[shareIndex.toString(\"hex\")], poly.getPolynomialID()));\n    }\n\n    if (this.storeDeviceShare) {\n      await this.storeDeviceShare(new ShareStore(shares[shareIndexes[1].toString(\"hex\")], poly.getPolynomialID()));\n    }\n\n    const result = {\n      privKey: this.privKey,\n      deviceShare: new ShareStore(shares[shareIndexes[1].toString(\"hex\")], poly.getPolynomialID()),\n      userShare: undefined,\n    };\n    if (determinedShare) {\n      result.userShare = new ShareStore(shares[shareIndexes[2].toString(\"hex\")], poly.getPolynomialID());\n    }\n    return result;\n  }\n\n  async addLocalMetadataTransitions(params: {\n    input: LocalTransitionData;\n    serviceProvider?: IServiceProvider;\n    privKey?: BN[];\n    acquireLock?: boolean;\n  }): Promise<void> {\n    const { privKey, input } = params;\n    this._localMetadataTransitions[0] = [...this._localMetadataTransitions[0], ...privKey];\n    this._localMetadataTransitions[1] = [...this._localMetadataTransitions[1], ...input];\n    if (!this.manualSync) await this.syncLocalMetadataTransitions();\n  }\n\n  async syncLocalMetadataTransitions(): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!(Array.isArray(this._localMetadataTransitions[0]) && this._localMetadataTransitions[0].length > 0)) return;\n\n    // get lock\n    let acquiredLock = false;\n    if (this.lastFetchedCloudMetadata) {\n      await this.acquireWriteMetadataLock();\n      acquiredLock = true;\n    }\n    try {\n      await this.storageLayer.setMetadataStream({\n        input: this._localMetadataTransitions[1],\n        privKey: this._localMetadataTransitions[0],\n        serviceProvider: this.serviceProvider,\n      });\n    } catch (error) {\n      throw CoreError.metadataPostFailed(prettyPrintError(error));\n    }\n\n    this._localMetadataTransitions = [[], []];\n    this.lastFetchedCloudMetadata = this.metadata.clone();\n    // release lock\n    if (acquiredLock) await this.releaseWriteMetadataLock();\n  }\n\n  // Returns a new instance of metadata with a clean state. All the previous state will be reset.\n  async updateSDK(params?: { withShare?: ShareStore }): Promise<ThresholdKey> {\n    const tb = new ThresholdKey({\n      enableLogging: this.enableLogging,\n      modules: this.modules,\n      serviceProvider: this.serviceProvider,\n      storageLayer: this.storageLayer,\n      manualSync: this.manualSync,\n    });\n\n    try {\n      await tb.initialize({ neverInitializeNewKey: true, withShare: params && params.withShare }); // TODO: need to modify for TSS\n    } catch (err) {\n      throw CoreError.fromCode(1103, `${err.message}`);\n    }\n\n    // Delete unnecessary polyIDs and shareStores\n    const allPolyIDList = tb.metadata.polyIDList;\n    let lastValidPolyID;\n\n    Object.keys(this.shares).forEach((x) => {\n      if (allPolyIDList.find((id) => id[0] === x)) {\n        lastValidPolyID = x;\n      } else {\n        delete this.shares[x];\n      }\n    });\n\n    // catchup to latest shareStore for all latest available shares.\n    // TODO: fix edge cases where shares are deleted in the newer polynomials\n    // TODO: maybe assign this.shares directly rather than output and inputsharestore.\n    const shareStoresForLastValidPolyID = Object.keys(this.shares[lastValidPolyID]).map((x) =>\n      tb.inputShareStoreSafe(this.outputShareStore(x, lastValidPolyID))\n    );\n    await Promise.all(shareStoresForLastValidPolyID);\n    return tb;\n  }\n\n  // NOTE: This API will be DEPRECATED in the future in favour of inputShareStoreSafe()\n  inputShareStore(shareStore: ShareStore): void {\n    let ss: ShareStore;\n    if (shareStore instanceof ShareStore) {\n      ss = shareStore;\n    } else if (typeof shareStore === \"object\") {\n      ss = ShareStore.fromJSON(shareStore);\n    } else {\n      throw CoreError.default(\"can only add type ShareStore into shares\");\n    }\n    if (!(ss.polynomialID in this.shares)) {\n      this.shares[ss.polynomialID] = {};\n    }\n    this.shares[ss.polynomialID][ss.share.shareIndex.toString(\"hex\")] = ss;\n  }\n\n  // inputs a share ensuring that the share is the latest share AND metadata is updated to its latest state\n  async inputShareStoreSafe(shareStore: ShareStore, autoUpdateMetadata = false): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    let ss: ShareStore;\n    if (shareStore instanceof ShareStore) {\n      ss = shareStore;\n    } else if (typeof shareStore === \"object\") {\n      ss = ShareStore.fromJSON(shareStore);\n    } else {\n      throw CoreError.default(\"can only add type ShareStore into shares\");\n    }\n    const latestShareRes = await this.catchupToLatestShare({ shareStore: ss, includeLocalMetadataTransitions: true });\n    // if not in poly id list, metadata is probably outdated\n    // is !this.metadata.polyIDList.includes(latestShareRes.latestShare.polynomialID)\n    if (!this.metadata.polyIDList.find((tuple) => tuple[0] === latestShareRes.latestShare.polynomialID)) {\n      if (!autoUpdateMetadata)\n        throw CoreError.default(\n          `TKey SDK metadata seems to be outdated because shareIndex: ` +\n            `${latestShareRes.latestShare.share.shareIndex.toString(\"hex\")} has a more recent metadata. Please call updateSDK first`\n        );\n      else this.metadata = latestShareRes.shareMetadata;\n    }\n    if (!(latestShareRes.latestShare.polynomialID in this.shares)) {\n      this.shares[latestShareRes.latestShare.polynomialID] = {};\n    }\n    this.shares[latestShareRes.latestShare.polynomialID][latestShareRes.latestShare.share.shareIndex.toString(\"hex\")] = latestShareRes.latestShare;\n  }\n\n  outputShareStore(shareIndex: BNString, polyID?: string): ShareStore {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    let shareIndexParsed: BN;\n    if (typeof shareIndex === \"number\") {\n      shareIndexParsed = new BN(shareIndex);\n    } else if (BN.isBN(shareIndex)) {\n      shareIndexParsed = shareIndex;\n    } else if (typeof shareIndex === \"string\") {\n      shareIndexParsed = new BN(shareIndex, \"hex\");\n    }\n    let polyIDToSearch: string;\n    if (polyID) {\n      polyIDToSearch = polyID;\n    } else {\n      polyIDToSearch = this.metadata.getLatestPublicPolynomial().getPolynomialID();\n    }\n    if (!this.metadata.getShareIndexesForPolynomial(polyIDToSearch).includes(shareIndexParsed.toString(\"hex\"))) {\n      throw new CoreError(1002, \"no such share index created\");\n    }\n    const shareFromStore = this.shares[polyIDToSearch][shareIndexParsed.toString(\"hex\")];\n    if (shareFromStore) return shareFromStore;\n    const poly = this.reconstructLatestPoly();\n    const shareMap = poly.generateShares([shareIndexParsed]);\n\n    return new ShareStore(shareMap[shareIndexParsed.toString(\"hex\")], polyIDToSearch);\n  }\n\n  _setKey(privKey: BN): void {\n    this.privKey = privKey;\n  }\n\n  getCurrentShareIndexes(): string[] {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const latestPolynomial = this.metadata.getLatestPublicPolynomial();\n    const latestPolynomialId = latestPolynomial.getPolynomialID();\n    const currentShareIndexes = Object.keys(this.shares[latestPolynomialId]);\n    return currentShareIndexes;\n  }\n\n  getKeyDetails(): KeyDetails {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const poly = this.metadata.getLatestPublicPolynomial();\n    const previousPolyID = poly.getPolynomialID();\n    const requiredShares = poly.getThreshold() - Object.keys(this.shares[previousPolyID]).length;\n\n    let shareDescriptions = this.metadata.getShareDescription();\n    if (shareDescriptions) {\n      const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(previousPolyID);\n      shareDescriptions = Object.keys(shareDescriptions).reduce((acc, index) => {\n        if (existingShareIndexes.indexOf(index) >= 0) acc[index] = shareDescriptions[index];\n        return acc;\n      }, {});\n    }\n\n    return {\n      pubKey: this.metadata.pubKey,\n      requiredShares,\n      threshold: poly.getThreshold(),\n      totalShares: this.metadata.getShareIndexesForPolynomial(previousPolyID).length,\n      shareDescriptions,\n    };\n  }\n\n  // Auth functions\n\n  generateAuthMetadata(params: { input: Metadata[] }): AuthMetadata[] {\n    const { input } = params;\n    const authMetadatas = [];\n    for (let i = 0; i < input.length; i += 1) {\n      authMetadatas.push(new AuthMetadata(input[i], this.privKey));\n    }\n    return authMetadatas;\n  }\n\n  setAuthMetadata(params: { input: Metadata; serviceProvider?: IServiceProvider; privKey?: BN }): Promise<{\n    message: string;\n  }> {\n    const { input, serviceProvider, privKey } = params;\n    const authMetadata = new AuthMetadata(input, this.privKey);\n    return this.storageLayer.setMetadata({ input: authMetadata, serviceProvider, privKey });\n  }\n\n  async setAuthMetadataBulk(params: { input: Metadata[]; serviceProvider?: IServiceProvider; privKey?: BN[] }): Promise<void> {\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    const { input, serviceProvider, privKey } = params;\n    const authMetadatas = [] as AuthMetadata[];\n    for (let i = 0; i < input.length; i += 1) {\n      authMetadatas.push(new AuthMetadata(input[i], this.privKey));\n    }\n    await this.addLocalMetadataTransitions({ input: authMetadatas, serviceProvider, privKey });\n  }\n\n  async getAuthMetadata(params: { serviceProvider?: IServiceProvider; privKey?: BN; includeLocalMetadataTransitions?: boolean }): Promise<Metadata> {\n    const raw = await this.getGenericMetadataWithTransitionStates({ ...params, fromJSONConstructor: AuthMetadata });\n    const authMetadata = raw as AuthMetadata;\n    return authMetadata.metadata;\n  }\n\n  // fetches the latest metadata potentially searching in local transition states first\n  async getGenericMetadataWithTransitionStates(params: {\n    fromJSONConstructor: FromJSONConstructor;\n    serviceProvider?: IServiceProvider;\n    privKey?: BN;\n    includeLocalMetadataTransitions?: boolean;\n    _localMetadataTransitions?: LocalMetadataTransitions;\n  }): Promise<unknown> {\n    if (!((params.serviceProvider && params.serviceProvider.postboxKey.toString(\"hex\") !== \"0\") || params.privKey)) {\n      throw CoreError.default(\"require either serviceProvider or priv key in getGenericMetadataWithTransitionStates\");\n    }\n    if (params.includeLocalMetadataTransitions) {\n      const transitions: LocalMetadataTransitions = params._localMetadataTransitions\n        ? params._localMetadataTransitions\n        : this._localMetadataTransitions;\n      let index = null;\n      for (let i = transitions[0].length - 1; i >= 0; i -= 1) {\n        const x = transitions[0][i];\n        if (params.privKey && x && x.cmp(params.privKey) === 0) index = i;\n        else if (params.serviceProvider && !x) index = i;\n      }\n      if (index !== null) {\n        return transitions[1][index];\n      }\n    }\n    let raw: IMessageMetadata;\n    try {\n      raw = await this.storageLayer.getMetadata(params);\n    } catch (err) {\n      throw CoreError.metadataGetFailed(`${prettyPrintError(err)}`);\n    }\n    if ((raw as IMessageMetadata).message === SHARE_DELETED) {\n      throw CoreError.fromCode(1308);\n    }\n    return params.fromJSONConstructor.fromJSON(raw);\n  }\n\n  // Lock functions\n  async acquireWriteMetadataLock(): Promise<number> {\n    if (this.haveWriteMetadataLock) return this.metadata.nonce;\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n\n    // we check the metadata of a random share we have on the latest polynomial we know that reflects the cloud\n    // below we cater for if we have an existing share or need to create the share in the SDK\n    let randomShareStore: ShareStore;\n    const latestPolyIDOnCloud = this.lastFetchedCloudMetadata.getLatestPublicPolynomial().getPolynomialID();\n    const shareIndexesExistInSDK = Object.keys(this.shares[latestPolyIDOnCloud]);\n    const randomIndex = shareIndexesExistInSDK[Math.floor(Math.random() * (shareIndexesExistInSDK.length - 1))];\n    if (shareIndexesExistInSDK.length >= 1) {\n      randomShareStore = this.shares[latestPolyIDOnCloud][randomIndex];\n    } else {\n      randomShareStore = this.outputShareStore(randomIndex, latestPolyIDOnCloud);\n    }\n    const latestRes = await this.catchupToLatestShare({ shareStore: randomShareStore });\n    const latestMetadata = latestRes.shareMetadata;\n\n    // read errors for what each means\n    if (latestMetadata.nonce > this.lastFetchedCloudMetadata.nonce) {\n      throw CoreError.acquireLockFailed(`unable to acquire write access for metadata due to \n      lastFetchedCloudMetadata (${this.lastFetchedCloudMetadata.nonce})\n           being lower than last written metadata nonce (${latestMetadata.nonce}). perhaps update metadata SDK (create new tKey and init)`);\n    } else if (latestMetadata.nonce < this.lastFetchedCloudMetadata.nonce) {\n      throw CoreError.acquireLockFailed(`unable to acquire write access for metadata due to \n      lastFetchedCloudMetadata (${this.lastFetchedCloudMetadata.nonce})\n      being higher than last written metadata nonce (${latestMetadata.nonce}). this should never happen as it \n      should only ever be updated by getting metadata)`);\n    }\n\n    const res = await this.storageLayer.acquireWriteLock({ privKey: this.privKey });\n    if (res.status !== 1) throw CoreError.acquireLockFailed(`lock cannot be acquired from storage layer status code: ${res.status}`);\n\n    // increment metadata nonce for write session\n    // this.metadata.nonce += 1;\n    this.haveWriteMetadataLock = res.id;\n    return this.metadata.nonce;\n  }\n\n  async releaseWriteMetadataLock(): Promise<void> {\n    if (!this.haveWriteMetadataLock) throw CoreError.releaseLockFailed(\"releaseWriteMetadataLock - don't have metadata lock to release\");\n    const res = await this.storageLayer.releaseWriteLock({ privKey: this.privKey, id: this.haveWriteMetadataLock });\n    if (res.status !== 1) throw CoreError.releaseLockFailed(`lock cannot be released from storage layer status code: ${res.status}`);\n    this.haveWriteMetadataLock = \"\";\n  }\n\n  // Module functions\n\n  async _syncShareMetadata(adjustScopedStore?: (ss: unknown) => unknown): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n\n    const shareArray = this.getAllShareStoresForLatestPolynomial().map((x) => x.share.share);\n    await this.syncMultipleShareMetadata(shareArray, adjustScopedStore);\n  }\n\n  async syncMultipleShareMetadata(shares: BN[], adjustScopedStore?: (ss: unknown) => unknown): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    this.metadata.nonce += 1;\n\n    const newMetadataPromise = shares.map(async (share) => {\n      const newMetadata = this.metadata.clone();\n      let specificShareMetadata: Metadata;\n      try {\n        specificShareMetadata = await this.getAuthMetadata({ privKey: share, includeLocalMetadataTransitions: true });\n      } catch (err) {\n        throw CoreError.authMetadataGetUnavailable(`${prettyPrintError(err)}`);\n      }\n\n      let scopedStoreToBeSet;\n      if (adjustScopedStore) {\n        scopedStoreToBeSet = adjustScopedStore(specificShareMetadata.scopedStore);\n      } else {\n        scopedStoreToBeSet = specificShareMetadata.scopedStore;\n      }\n      newMetadata.scopedStore = scopedStoreToBeSet;\n      return newMetadata;\n    });\n    const newMetadata = await Promise.all(newMetadataPromise);\n    return this.setAuthMetadataBulk({ input: newMetadata, privKey: shares });\n  }\n\n  _addRefreshMiddleware(\n    moduleName: string,\n    middleware: (generalStore: unknown, oldShareStores: ShareStoreMap, newShareStores: ShareStoreMap) => unknown\n  ): void {\n    this._refreshMiddleware[moduleName] = middleware;\n  }\n\n  _addReconstructKeyMiddleware(moduleName: string, middleware: () => Promise<BN[]>): void {\n    this._reconstructKeyMiddleware[moduleName] = middleware;\n  }\n\n  _addShareSerializationMiddleware(\n    serialize: (share: BN, type: string) => Promise<unknown>,\n    deserialize: (serializedShare: unknown, type: string) => Promise<BN>\n  ): void {\n    this._shareSerializationMiddleware = {\n      serialize,\n      deserialize,\n    };\n  }\n\n  _setDeviceStorage(storeDeviceStorage: (deviceShareStore: ShareStore) => Promise<void>): void {\n    if (this.storeDeviceShare) {\n      throw CoreError.default(\"storeDeviceShare already set\");\n    }\n    this.storeDeviceShare = storeDeviceStorage;\n  }\n\n  async addShareDescription(shareIndex: string, description: string, updateMetadata?: boolean): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    this.metadata.addShareDescription(shareIndex, description);\n    if (updateMetadata) {\n      await this._syncShareMetadata();\n    }\n  }\n\n  async deleteShareDescription(shareIndex: string, description: string, updateMetadata?: boolean): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    this.metadata.deleteShareDescription(shareIndex, description);\n    if (updateMetadata) {\n      await this._syncShareMetadata();\n    }\n  }\n\n  async updateShareDescription(shareIndex: string, oldDescription: string, newDescription: string, updateMetadata?: boolean): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    this.metadata.updateShareDescription(shareIndex, oldDescription, newDescription);\n    if (updateMetadata) {\n      await this._syncShareMetadata();\n    }\n  }\n\n  async encrypt(data: Buffer): Promise<EncryptedMessage> {\n    if (!this.privKey) throw CoreError.privateKeyUnavailable();\n    return encrypt(getPubKeyECC(this.privKey), data);\n  }\n\n  async decrypt(encryptedMessage: EncryptedMessage): Promise<Buffer> {\n    if (!this.privKey) throw CoreError.privateKeyUnavailable();\n    return decrypt(toPrivKeyECC(this.privKey), encryptedMessage);\n  }\n\n  async _setTKeyStoreItem(moduleName: string, data: TkeyStoreItemType): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const rawTkeyStoreItems: EncryptedMessage[] = (this.metadata.getTkeyStoreDomain(moduleName) as EncryptedMessage[]) || [];\n    const decryptedItems = await Promise.all(\n      rawTkeyStoreItems.map(async (x) => {\n        const decryptedItem = await this.decrypt(x);\n        return JSON.parse(decryptedItem.toString()) as TkeyStoreItemType;\n      })\n    );\n    const encryptedData = await this.encrypt(Buffer.from(stringify(data)));\n    const duplicateItemIndex = decryptedItems.findIndex((x) => x.id === data.id);\n    if (duplicateItemIndex > -1) {\n      rawTkeyStoreItems[duplicateItemIndex] = encryptedData;\n    } else {\n      rawTkeyStoreItems.push(encryptedData);\n    }\n\n    // update metadataStore\n    this.metadata.setTkeyStoreDomain(moduleName, rawTkeyStoreItems);\n    await this._syncShareMetadata();\n  }\n\n  async _deleteTKeyStoreItem(moduleName: string, id: string): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const rawTkeyStoreItems = (this.metadata.getTkeyStoreDomain(moduleName) as EncryptedMessage[]) || [];\n    const decryptedItems = await Promise.all(\n      rawTkeyStoreItems.map(async (x) => {\n        const decryptedItem = await this.decrypt(x);\n        return JSON.parse(decryptedItem.toString()) as TkeyStoreItemType;\n      })\n    );\n    const finalItems = decryptedItems.filter((x) => x.id !== id);\n    this.metadata.setTkeyStoreDomain(moduleName, finalItems);\n    await this._syncShareMetadata();\n  }\n\n  async getTKeyStore(moduleName: string): Promise<TkeyStoreItemType[]> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const rawTkeyStoreItems = (this.metadata.getTkeyStoreDomain(moduleName) as EncryptedMessage[]) || [];\n\n    const decryptedItems = await Promise.all(\n      rawTkeyStoreItems.map(async (x) => {\n        const decryptedItem = await this.decrypt(x);\n        return JSON.parse(decryptedItem.toString()) as TkeyStoreItemType;\n      })\n    );\n    return decryptedItems;\n  }\n\n  async getTKeyStoreItem(moduleName: string, id: string): Promise<TkeyStoreItemType> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    const rawTkeyStoreItems = (this.metadata.getTkeyStoreDomain(moduleName) as EncryptedMessage[]) || [];\n\n    const decryptedItems = await Promise.all(\n      rawTkeyStoreItems.map(async (x) => {\n        const decryptedItem = await this.decrypt(x);\n        return JSON.parse(decryptedItem.toString()) as TkeyStoreItemType;\n      })\n    );\n    const item = decryptedItems.find((x) => x.id === id);\n    return item;\n  }\n\n  // Import export shares\n  async outputShare(shareIndex: BNString, type?: string): Promise<unknown> {\n    const { share } = this.outputShareStore(shareIndex).share;\n    if (!type) return share;\n\n    return this._shareSerializationMiddleware.serialize(share, type);\n  }\n\n  async inputShare(share: unknown, type?: string): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    let shareStore: ShareStore;\n    if (!type) shareStore = this.metadata.shareToShareStore(share as BN);\n    else {\n      const deserialized = await this._shareSerializationMiddleware.deserialize(share, type);\n      shareStore = this.metadata.shareToShareStore(deserialized);\n    }\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const pubPolyID = pubPoly.getPolynomialID();\n    const fullShareIndexesList = this.metadata.getShareIndexesForPolynomial(pubPolyID);\n    if (!fullShareIndexesList.includes(shareStore.share.shareIndex.toString(\"hex\"))) {\n      throw CoreError.default(\"Latest poly doesn't include this share\");\n    }\n    await this.inputShareStoreSafe(shareStore);\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      shares: this.shares,\n      tssTag: this.tssTag,\n      enableLogging: this.enableLogging,\n      privKey: this.privKey ? this.privKey.toString(\"hex\") : undefined,\n      metadata: this.metadata,\n      lastFetchedCloudMetadata: this.lastFetchedCloudMetadata,\n      _localMetadataTransitions: this._localMetadataTransitions,\n      manualSync: this.manualSync,\n      serviceProvider: this.serviceProvider,\n      storageLayer: this.storageLayer,\n    };\n  }\n\n  getAllShareStoresForLatestPolynomial(): ShareStore[] {\n    const pubPoly = this.metadata.getLatestPublicPolynomial();\n    const pubPolyID = pubPoly.getPolynomialID();\n    const existingShareIndexes = this.metadata.getShareIndexesForPolynomial(pubPolyID);\n    const threshold = pubPoly.getThreshold();\n\n    const pointsArr = [];\n    const sharesForExistingPoly = Object.keys(this.shares[pubPolyID]);\n    if (sharesForExistingPoly.length < threshold) {\n      throw CoreError.unableToReconstruct(\"not enough shares for polynomial reconstruction\");\n    }\n    for (let i = 0; i < threshold; i += 1) {\n      pointsArr.push(new Point(new BN(sharesForExistingPoly[i], \"hex\"), this.shares[pubPolyID][sharesForExistingPoly[i]].share.share));\n    }\n    const currentPoly = lagrangeInterpolatePolynomial(pointsArr);\n    const allExistingShares = currentPoly.generateShares(existingShareIndexes);\n    const shareArray = existingShareIndexes.map((shareIndex) => {\n      return this.metadata.shareToShareStore(allExistingShares[shareIndex].share);\n    });\n    return shareArray;\n  }\n\n  /// Destructive method. All data will be wiped!\n  // TODO: tssTag should be different from the user if they decide to delete and recreate tkey\n  async CRITICAL_deleteTkey(): Promise<void> {\n    if (!this.metadata) {\n      throw CoreError.metadataUndefined();\n    }\n    if (!this.privKey) {\n      throw CoreError.privateKeyUnavailable();\n    }\n    if (this._localMetadataTransitions[0].length > 0 || this._localMetadataTransitions[1].length > 0) {\n      throw CoreError.default(\"Please sync all local state before calling this function\");\n    }\n\n    // Construct all shares\n    const shareArray = this.getAllShareStoresForLatestPolynomial();\n    await this.addLocalMetadataTransitions({\n      input: [...Array(shareArray.length).fill({ message: SHARE_DELETED, dateAdded: Date.now() }), { message: KEY_NOT_FOUND }],\n      privKey: [...shareArray.map((x) => x.share.share), undefined],\n    });\n    await this.syncLocalMetadataTransitions(); // forcesync\n\n    this.privKey = undefined;\n    this.metadata = undefined;\n    this.shares = {};\n    this.lastFetchedCloudMetadata = undefined;\n  }\n\n  getApi(): ITKeyApi {\n    return {\n      getMetadata: this.getMetadata.bind(this),\n      getStorageLayer: this.getStorageLayer.bind(this),\n      initialize: this.initialize.bind(this),\n      catchupToLatestShare: this.catchupToLatestShare.bind(this),\n      _syncShareMetadata: this._syncShareMetadata.bind(this),\n      _addRefreshMiddleware: this._addRefreshMiddleware.bind(this),\n      _addReconstructKeyMiddleware: this._addReconstructKeyMiddleware.bind(this),\n      _addShareSerializationMiddleware: this._addShareSerializationMiddleware.bind(this),\n      addShareDescription: this.addShareDescription.bind(this),\n      generateNewShare: this.generateNewShare.bind(this),\n      inputShareStore: this.inputShareStore.bind(this),\n      inputShareStoreSafe: this.inputShareStoreSafe.bind(this),\n      outputShareStore: this.outputShareStore.bind(this),\n      inputShare: this.inputShare.bind(this),\n      outputShare: this.outputShare.bind(this),\n      _setDeviceStorage: this._setDeviceStorage.bind(this),\n      encrypt: this.encrypt.bind(this),\n      decrypt: this.decrypt.bind(this),\n      getTKeyStore: this.getTKeyStore.bind(this),\n      getTKeyStoreItem: this.getTKeyStoreItem.bind(this),\n      _setTKeyStoreItem: this._setTKeyStoreItem.bind(this),\n      _deleteTKeyStoreItem: this._deleteTKeyStoreItem.bind(this),\n      deleteShare: this.deleteShare.bind(this),\n    };\n  }\n\n  private setModuleReferences() {\n    Object.keys(this.modules).map((x) => this.modules[x].setModuleReferences(this.getApi()));\n  }\n\n  private async initializeModules() {\n    return Promise.all(Object.keys(this.modules).map((x) => this.modules[x].initialize()));\n  }\n}\n\nexport default ThresholdKey;\n","export { default as AuthMetadata } from \"./authMetadata\";\nexport { default } from \"./core\";\nexport { default as CoreError } from \"./errors\";\nexport * from \"./lagrangeInterpolatePolynomial\";\nexport { default as Metadata } from \"./metadata\";\n"],"names":["TkeyError","CoreError","code","message","Object","defineProperty","value","extraMessage","messages","fromCode","ecCurve","generatePrivateExcludingIndexes","Point","Polynomial","generatePrivate","BN","generateEmptyBNArray","length","Array","from","denominator","i","innerPoints","result","xi","x","j","tmp","sub","umod","curve","n","mul","interpolationPoly","coefficients","d","cmp","default","invm","k","newCoefficients","add","pointSort","pointArrClone","sort","a","b","lagrange","unsortedPoints","sortedPoints","polynomial","y","lagrangeInterpolatePolynomial","points","lagrangeInterpolation","shares","nodeIndex","secret","upper","lower","neg","temp","delta","generateRandomPolynomial","degree","deterministicShares","actualS","poly","share","push","isArray","forEach","shareIndex","toString","undefined","values","polyCommitmentEval","polyCommitments","index","basePtPolyCommitments","key","keyFromPublic","getPublic","shareCommitment","factor","pow","e","getX","getY","dotProduct","arr1","arr2","modulus","Error","sum","kCombinations","s","set","_","reduce","acc","cur","combs","tailCombs","slice","getLagrangeCoeffs","_allIndexes","_myIndex","_target","allIndexes","map","myIndex","target","tempUpper","tempLower","decrypt","getPubKeyPoint","PublicPolynomial","PublicShare","Share","ShareStore","toPrivKeyECC","stringify","Metadata","input","tssPolyCommits","tssNonces","factorPubs","factorEncs","publicPolynomials","publicShares","generalStore","tkeyStore","scopedStore","pubKey","polyIDList","nonce","polyID","matchingPolyIDs","filter","tuple","polynomialID","publicShare","obj","arr","tssData","tssTag","tssNonce","publicPolynomial","getPublicPolynomial","getPolynomialID","shareIndexArr","addPublicShare","getPublicShare","prototype","hasOwnProperty","call","domain","data","shareStore","pubShare","encryptedShareStore","encryptedShares","encryptedShareStoreUnavailable","encryptedShare","rawDecrypted","fromJSON","JSON","parse","getGeneralStoreDomain","description","currentSD","setGeneralStoreDomain","indexOf","splice","oldDescription","newDescription","pubkey","returnShare","el","t","polynomialCommitments","eq","tempShare","serializedPolyIDList","shareIndexes","sortedShareIndexes","serializedPolyID","split","concat","join","encode","ec","point","fromCompressedPub","metadata","unserializedPolyIDList","arrPolyID","zeroIndex","findIndex","v","firstHalf","secondHalf","pubPolyID","pointCommitments","compressedCommitment","stripHexPrefix","toPrivKeyEC","keccak256","AuthMetadata","privKey","privKeyUnavailable","sig","sign","toDER","m","metadataPubKeyUnavailable","pubK","verify","ecPoint","encrypt","getPubKeyECC","hexPoint","KEY_NOT_FOUND","ONE_KEY_DELETE_NONCE","prettyPrintError","randomSelection","RSSClient","SHARE_DELETED","ThresholdKey","args","enableLogging","modules","serviceProvider","storageLayer","manualSync","_refreshMiddleware","_reconstructKeyMiddleware","_shareSerializationMiddleware","storeDeviceShare","_localMetadataTransitions","setModuleReferences","haveWriteMetadataLock","metadataUndefined","params","p","delete1OutOf1","delete1OutOf1OnlyManualSync","withShare","importKey","neverInitializeNewKey","transitionMetadata","previouslyFetchedCloudMetadata","previousLocalMetadataTransitions","useTSS","deviceTSSShare","factorPub","deviceTSSIndex","previousLocalMetadataTransitionsExists","reinitializing","reinitializingWithNewKeyAssign","spIncludeLocalMetadataTransitions","spLocalMetadataTransitions","getGenericMetadataWithTransitionStates","includeLocalMetadataTransitions","fromJSONConstructor","val","rawServiceProviderShare","noKeyFound","_initializeNewKey","initializeModules","importedKey","_initializeNewTSSKey","addTSSData","getKeyDetails","catchupToLatestShare","latestShareDetails","noMetadataExistsForShare","shareMetadata","latestCloudMetadata","clone","currentMetadata","lastFetchedCloudMetadata","latestShare","inputShareStore","f","factorPubID","factorKey","opts","getFactorEncs","userEnc","serverEncs","tssIndex","type","Buffer","userDecryption","Promise","all","factorEnc","serverDecryptions","tssShareBufs","tssShareBNs","buf","tssCommits","getTSSCommits","userDec","tssSharePub","g","tssCommitA0","tssCommitA1","_tssSharePub","tssShare","serverDecs","serverIndexes","fill","threshold","combis","Math","ceil","combi","selectedServerDecs","includes","selectedServerIndexes","serverLagrangeCoeffs","serverInterpolated","lagrangeCoeffs","getAuthMetadata","authMetadataGetUnavailable","getEncryptedShare","nextShare","pubPoly","getLatestPublicPolynomial","requiredThreshold","getThreshold","sharesLeft","fullShareList","getShareIndexesForPolynomial","shareIndexesRequired","sharesToInput","z","sharesForPoly","shareIndexesForPoly","keys","currentShareForPoly","latestShareRes","unableToReconstruct","polyShares","shareArr","reconstructedPubKey","incorrectReconstruction","_setKey","returnObject","allKeys","extraKeys","pointsArr","sharesForExistingPoly","Set","size","tssOptions","privateKeyUnavailable","shareIndexToDelete","shareToDelete","outputShareStore","previousPolyID","existingShareIndexes","newShareIndexes","bn","inputTSSIndex","inputTSSShare","selectedServers","authSignatures","existingFactorPubs","found","updatedFactorPubs","_getRssNodeDetails","rssNodeDetails","randomSelectedServers","serverEndpoints","updatedTSSIndexes","fb","_refreshTSSShares","getVerifierNameVerifierId","_refreshShares","results","newShareStores","shareStores","addLocalMetadataTransitions","dateAdded","Date","now","getTSSNodeDetails","serverPubKeys","serverThreshold","floor","getRSSNodeDetails","newFactorPub","newTSSIndex","verifierId","existingTSSIndexes","existingShareIndexesBN","newShareIndex","updateMetadata","inputShare","inputIndex","targetIndexes","verifierNameVerifierId","serverOpts","tssPubKeyPoint","tssPubKey","rssClient","oldLabel","newLabel","getTSSPubKey","newTSSServerPub","console","log","refresh","sigs","dkgNewPub","refreshResponses","secondCommit","newTSSCommits","refreshResponse","padStart","targetIndex","userFactorEnc","serverFactorEncs","_syncShareMetadata","generateShares","oldPoly","shareIndexesNeedingEncryption","shareIndexHex","addFromPolynomialAndShares","oldShareStores","newScopedStore","oldShare","polyEval","sharesToPush","setScopedStore","metadataToPush","moduleName","adjustedGeneralStore","deleteGeneralStoreDomain","newShareMetadataToPush","newShareStoreSharesToPush","me","AuthMetadatas","generateAuthMetadata","_tssIndex","tss2","tss1Pub","tss1PubKey","tss2Pub","tss2PubKey","L1_0","LIndex_0","a0Pub","a1Pub","determinedShare","tmpPriv","shareIndexForDeviceStorage","shareIndexForDeterminedShare","serviceProviderShare","authMetadatas","postboxKey","deviceShare","userShare","syncLocalMetadataTransitions","acquiredLock","acquireWriteMetadataLock","setMetadataStream","metadataPostFailed","releaseWriteMetadataLock","tb","initialize","allPolyIDList","find","id","lastValidPolyID","shareStoresForLastValidPolyID","inputShareStoreSafe","ss","autoUpdateMetadata","shareIndexParsed","isBN","polyIDToSearch","shareFromStore","reconstructLatestPoly","shareMap","latestPolynomial","latestPolynomialId","currentShareIndexes","requiredShares","shareDescriptions","getShareDescription","totalShares","authMetadata","setMetadata","raw","transitions","getMetadata","metadataGetFailed","latestPolyIDOnCloud","shareIndexesExistInSDK","randomIndex","random","randomShareStore","latestRes","latestMetadata","acquireLockFailed","acquireWriteLock","res","status","releaseLockFailed","releaseWriteLock","adjustScopedStore","shareArray","getAllShareStoresForLatestPolynomial","syncMultipleShareMetadata","newMetadataPromise","newMetadata","specificShareMetadata","scopedStoreToBeSet","setAuthMetadataBulk","middleware","serialize","deserialize","storeDeviceStorage","addShareDescription","deleteShareDescription","updateShareDescription","encryptedMessage","rawTkeyStoreItems","getTkeyStoreDomain","decryptedItem","decryptedItems","encryptedData","duplicateItemIndex","setTkeyStoreDomain","finalItems","item","shareToShareStore","deserialized","fullShareIndexesList","currentPoly","allExistingShares","bind","getStorageLayer","_addRefreshMiddleware","_addReconstructKeyMiddleware","_addShareSerializationMiddleware","generateNewShare","outputShare","_setDeviceStorage","getTKeyStore","getTKeyStoreItem","_setTKeyStoreItem","_deleteTKeyStoreItem","deleteShare","getApi","shareStoreMapElement","shareElementKey","AuthMetadataKeys","ShareStoreKeys","sampleMessageMetadata","MessageMetadataKeys","localTransitionShares","localTransitionData","every","tempAuth","shareToUseForSerialization","tempMetadata","tempCloud"],"sourceRoot":""}