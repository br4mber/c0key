{"version":3,"file":"storageLayerTorus.cjs.js","mappings":"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","sources":["webpack://@tkey/storage-layer-torus/webpack/bootstrap","webpack://@tkey/storage-layer-torus/webpack/runtime/compat get default export","webpack://@tkey/storage-layer-torus/webpack/runtime/define property getters","webpack://@tkey/storage-layer-torus/webpack/runtime/hasOwnProperty shorthand","webpack://@tkey/storage-layer-torus/webpack/runtime/make namespace object","webpack://@tkey/storage-layer-torus/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@tkey/storage-layer-torus/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@tkey/storage-layer-torus/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@tkey/storage-layer-torus/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@tkey/storage-layer-torus/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@tkey/storage-layer-torus/external commonjs2 \"@tkey/common-types\"","webpack://@tkey/storage-layer-torus/external commonjs2 \"json-stable-stringify\"","webpack://@tkey/storage-layer-torus/./src/MockStorageLayer.ts","webpack://@tkey/storage-layer-torus/external commonjs2 \"@babel/runtime/helpers/typeof\"","webpack://@tkey/storage-layer-torus/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@tkey/storage-layer-torus/external commonjs2 \"bn.js\"","webpack://@tkey/storage-layer-torus/external commonjs2 \"web3-utils\"","webpack://@tkey/storage-layer-torus/./src/TorusStorageLayer.ts","webpack://@tkey/storage-layer-torus/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey/common-types\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"json-stable-stringify\");","import {\n  generateID,\n  getPubKeyPoint,\n  IServiceProvider,\n  IStorageLayer,\n  KEY_NOT_FOUND,\n  MockStorageLayerArgs,\n  StringifiedType,\n} from \"@tkey/common-types\";\nimport BN from \"bn.js\";\nimport stringify from \"json-stable-stringify\";\n\nclass MockStorageLayer implements IStorageLayer {\n  dataMap: {\n    [key: string]: unknown;\n  };\n\n  storageLayerName: string;\n\n  lockMap: {\n    [key: string]: string;\n  };\n\n  serviceProvider: IServiceProvider;\n\n  constructor({ dataMap, lockMap }: MockStorageLayerArgs = { dataMap: {}, lockMap: {} }) {\n    this.dataMap = dataMap || {};\n    this.lockMap = lockMap || {};\n    this.storageLayerName = \"MockStorageLayer\";\n  }\n\n  static fromJSON(value: StringifiedType): MockStorageLayer {\n    const { dataMap, lockMap, storageLayerName } = value;\n    if (storageLayerName !== \"MockStorageLayer\") return undefined;\n    return new MockStorageLayer({ dataMap, lockMap });\n  }\n\n  /**\n   *  Get metadata for a key\n   * @param privKey - If not provided, it will use service provider's share for decryption\n   */\n  async getMetadata<T>(params: { serviceProvider?: IServiceProvider; privKey?: BN }): Promise<T> {\n    const { serviceProvider, privKey } = params;\n    let usedKey: BN;\n    if (!privKey) usedKey = serviceProvider.retrievePubKeyPoint().getX();\n    else usedKey = getPubKeyPoint(privKey).x;\n\n    const fromMap = this.dataMap[usedKey.toString(\"hex\")];\n    if (!fromMap) {\n      return Object.create({ message: KEY_NOT_FOUND }) as T;\n    }\n    return JSON.parse(this.dataMap[usedKey.toString(\"hex\")] as string) as T;\n  }\n\n  /**\n   * Set Metadata for a key\n   * @param input - data to post\n   * @param privKey - If not provided, it will use service provider's share for encryption\n   */\n  async setMetadata<T>(params: { input: T; serviceProvider?: IServiceProvider; privKey?: BN }): Promise<{ message: string }> {\n    const { serviceProvider, privKey, input } = params;\n    let usedKey: BN;\n    if (!privKey) usedKey = serviceProvider.retrievePubKeyPoint().getX();\n    else usedKey = getPubKeyPoint(privKey).x;\n    this.dataMap[usedKey.toString(\"hex\")] = stringify(input);\n    return { message: \"success\" };\n  }\n\n  async setMetadataStream<T>(params: { input: Array<T>; serviceProvider?: IServiceProvider; privKey?: Array<BN> }): Promise<{ message: string }> {\n    const { serviceProvider, privKey, input } = params;\n    input.forEach((el, index) => {\n      let usedKey: BN;\n      if (!privKey || !privKey[index]) usedKey = serviceProvider.retrievePubKeyPoint().getX();\n      else usedKey = getPubKeyPoint(privKey[index]).x;\n      this.dataMap[usedKey.toString(\"hex\")] = stringify(el);\n    });\n\n    return { message: \"success\" };\n  }\n\n  async acquireWriteLock(params: { serviceProvider?: IServiceProvider; privKey?: BN }): Promise<{ status: number; id?: string }> {\n    const { serviceProvider, privKey } = params;\n    let usedKey: BN;\n    if (!privKey) usedKey = serviceProvider.retrievePubKeyPoint().getX();\n    else usedKey = getPubKeyPoint(privKey).x;\n    if (this.lockMap[usedKey.toString(\"hex\")]) return { status: 0 };\n    const id = generateID();\n    this.lockMap[usedKey.toString(\"hex\")] = id;\n    return { status: 1, id };\n  }\n\n  async releaseWriteLock(params: { id: string; serviceProvider?: IServiceProvider; privKey?: BN }): Promise<{ status: number }> {\n    const { serviceProvider, privKey, id } = params;\n    let usedKey: BN;\n    if (!privKey) usedKey = serviceProvider.retrievePubKeyPoint().getX();\n    else usedKey = getPubKeyPoint(privKey).x;\n    if (!this.lockMap[usedKey.toString(\"hex\")]) return { status: 0 };\n    if (id !== this.lockMap[usedKey.toString(\"hex\")]) return { status: 2 };\n    this.lockMap[usedKey.toString(\"hex\")] = null;\n    return { status: 1 };\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      dataMap: this.dataMap,\n      serviceProvider: this.serviceProvider,\n      storageLayerName: this.storageLayerName,\n    };\n  }\n}\n\nexport default MockStorageLayer;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/typeof\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"web3-utils\");","import {\n  decrypt,\n  ecCurve,\n  encrypt,\n  EncryptedMessage,\n  getPubKeyECC,\n  getPubKeyPoint,\n  IServiceProvider,\n  IStorageLayer,\n  KEY_NOT_FOUND,\n  ONE_KEY_DELETE_NONCE,\n  ONE_KEY_NAMESPACE,\n  prettyPrintError,\n  StringifiedType,\n  stripHexPrefix,\n  toPrivKeyEC,\n  toPrivKeyECC,\n  TorusStorageLayerAPIParams,\n  TorusStorageLayerArgs,\n} from \"@tkey/common-types\";\nimport { post } from \"@toruslabs/http-helpers\";\nimport BN from \"bn.js\";\nimport stringify from \"json-stable-stringify\";\nimport { keccak256 } from \"web3-utils\";\n\nfunction signDataWithPrivKey(data: { timestamp: number }, privKey: BN): string {\n  const sig = ecCurve.sign(stripHexPrefix(keccak256(stringify(data))), toPrivKeyECC(privKey), \"utf-8\");\n  return sig.toDER(\"hex\");\n}\n\nclass TorusStorageLayer implements IStorageLayer {\n  enableLogging: boolean;\n\n  hostUrl: string;\n\n  storageLayerName: string;\n\n  serverTimeOffset: number;\n\n  constructor({ enableLogging = false, hostUrl = \"http://localhost:5051\", serverTimeOffset = 0 }: TorusStorageLayerArgs) {\n    this.enableLogging = enableLogging;\n    this.hostUrl = hostUrl;\n    this.storageLayerName = \"TorusStorageLayer\";\n    this.serverTimeOffset = serverTimeOffset;\n  }\n\n  static async serializeMetadataParamsInput(el: unknown, serviceProvider: IServiceProvider, privKey: BN): Promise<unknown> {\n    if (typeof el === \"object\") {\n      // Allow using of special message as command, in which case, do not encrypt\n      const obj = el as Record<string, unknown>;\n      const isCommandMessage = obj.message === ONE_KEY_DELETE_NONCE;\n      if (isCommandMessage) return obj.message;\n    }\n\n    // General case, encrypt message\n    const bufferMetadata = Buffer.from(stringify(el));\n    let encryptedDetails: EncryptedMessage;\n    if (privKey) {\n      encryptedDetails = await encrypt(getPubKeyECC(privKey), bufferMetadata);\n    } else {\n      encryptedDetails = await serviceProvider.encrypt(bufferMetadata);\n    }\n    const serializedEncryptedDetails = btoa(stringify(encryptedDetails));\n    return serializedEncryptedDetails;\n  }\n\n  static fromJSON(value: StringifiedType): TorusStorageLayer {\n    const { enableLogging, hostUrl, storageLayerName, serverTimeOffset = 0 } = value;\n    if (storageLayerName !== \"TorusStorageLayer\") return undefined;\n    return new TorusStorageLayer({ enableLogging, hostUrl, serverTimeOffset });\n  }\n\n  /**\n   *  Get metadata for a key\n   * @param privKey - If not provided, it will use service provider's share for decryption\n   */\n  async getMetadata<T>(params: { serviceProvider?: IServiceProvider; privKey?: BN }): Promise<T> {\n    const { serviceProvider, privKey } = params;\n    const keyDetails = this.generateMetadataParams({}, serviceProvider, privKey);\n    const metadataResponse = await post<{ message: string }>(`${this.hostUrl}/get`, keyDetails);\n    // returns empty object if object\n    if (metadataResponse.message === \"\") {\n      return Object.create({ message: KEY_NOT_FOUND }) as T;\n    }\n    const encryptedMessage = JSON.parse(atob(metadataResponse.message));\n\n    let decrypted: Buffer;\n    if (privKey) {\n      decrypted = await decrypt(toPrivKeyECC(privKey), encryptedMessage);\n    } else {\n      decrypted = await serviceProvider.decrypt(encryptedMessage);\n    }\n\n    return JSON.parse(decrypted.toString()) as T;\n  }\n\n  /**\n   * Set Metadata for a key\n   * @param input - data to post\n   * @param privKey - If not provided, it will use service provider's share for encryption\n   */\n  async setMetadata<T>(params: { input: T; serviceProvider?: IServiceProvider; privKey?: BN }): Promise<{ message: string }> {\n    try {\n      const { serviceProvider, privKey, input } = params;\n      const metadataParams = this.generateMetadataParams(\n        await TorusStorageLayer.serializeMetadataParamsInput(input, serviceProvider, privKey),\n        serviceProvider,\n        privKey\n      );\n      return await post<{ message: string }>(`${this.hostUrl}/set`, metadataParams);\n    } catch (error) {\n      let apiError: any;\n      try {\n        apiError = await error.json();\n      } catch (error2) {\n        // ignore error2. it means not an api error\n        throw error;\n      }\n      if (apiError) throw new Error(prettyPrintError(apiError));\n    }\n  }\n\n  async setMetadataStream<T>(params: { input: Array<T>; serviceProvider?: IServiceProvider; privKey?: Array<BN> }): Promise<{ message: string }> {\n    try {\n      const { serviceProvider, privKey, input } = params;\n      const newInput = input;\n      const finalMetadataParams = await Promise.all(\n        newInput.map(async (el, i) =>\n          this.generateMetadataParams(\n            await TorusStorageLayer.serializeMetadataParamsInput(el, serviceProvider, privKey[i]),\n            serviceProvider,\n            privKey[i]\n          )\n        )\n      );\n\n      const FD = new FormData();\n      finalMetadataParams.forEach((el, index) => {\n        FD.append(index.toString(), JSON.stringify(el));\n      });\n      const options: RequestInit = {\n        mode: \"cors\",\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": undefined,\n        },\n      };\n\n      const customOptions = {\n        isUrlEncodedData: true,\n        timeout: 600 * 1000, // 10 mins of timeout for excessive shares case\n      };\n      return await post<{ message: string }>(`${this.hostUrl}/bulk_set_stream`, FD, options, customOptions);\n    } catch (error) {\n      let apiError: any;\n      try {\n        apiError = await error.json();\n      } catch (error2) {\n        // ignore error2. it means not an api error\n        throw error;\n      }\n      if (apiError) throw new Error(prettyPrintError(apiError));\n    }\n  }\n\n  generateMetadataParams(message: unknown, serviceProvider?: IServiceProvider, privKey?: BN): TorusStorageLayerAPIParams {\n    let sig: string;\n    let pubX: string;\n    let pubY: string;\n    let namespace = \"tkey\";\n    const setTKeyStore = {\n      data: message,\n      timestamp: new BN(~~((this.serverTimeOffset + Date.now()) / 1000)).toString(16),\n    };\n\n    // Overwrite bulk_set to allow deleting nonce v2 together with creating tKey.\n    // This is a workaround, a better solution is allow upstream API to set tableName/namespace of metadata params\n    if (message === ONE_KEY_DELETE_NONCE) {\n      namespace = ONE_KEY_NAMESPACE;\n      setTKeyStore.data = \"<deleted>\";\n    }\n\n    const hash = keccak256(stringify(setTKeyStore)).slice(2);\n    if (privKey) {\n      const unparsedSig = toPrivKeyEC(privKey).sign(hash);\n      sig = Buffer.from(unparsedSig.r.toString(16, 64) + unparsedSig.s.toString(16, 64) + new BN(0).toString(16, 2), \"hex\").toString(\"base64\");\n      const pubK = getPubKeyPoint(privKey);\n      pubX = pubK.x.toString(\"hex\");\n      pubY = pubK.y.toString(\"hex\");\n    } else {\n      const point = serviceProvider.retrievePubKeyPoint();\n      sig = serviceProvider.sign(hash);\n      pubX = point.getX().toString(\"hex\");\n      pubY = point.getY().toString(\"hex\");\n    }\n    return {\n      pub_key_X: pubX,\n      pub_key_Y: pubY,\n      set_data: setTKeyStore,\n      signature: sig,\n      namespace,\n    };\n  }\n\n  async acquireWriteLock(params: { serviceProvider?: IServiceProvider; privKey?: BN }): Promise<{ status: number; id?: string }> {\n    const { serviceProvider, privKey } = params;\n    const data = {\n      timestamp: Math.floor((this.serverTimeOffset + Date.now()) / 1000),\n    };\n\n    let signature: string;\n    if (privKey) {\n      signature = signDataWithPrivKey(data, privKey);\n    } else {\n      signature = serviceProvider.sign(stripHexPrefix(keccak256(stringify(data))));\n    }\n    const metadataParams = {\n      key: toPrivKeyEC(privKey).getPublic(\"hex\"),\n      data,\n      signature,\n    };\n    return post<{ status: number; id?: string }>(`${this.hostUrl}/acquireLock`, metadataParams);\n  }\n\n  async releaseWriteLock(params: { id: string; serviceProvider?: IServiceProvider; privKey?: BN }): Promise<{ status: number }> {\n    const { serviceProvider, privKey, id } = params;\n    const data = {\n      timestamp: Math.floor((this.serverTimeOffset + Date.now()) / 1000),\n    };\n\n    let signature: string;\n    if (privKey) {\n      signature = signDataWithPrivKey(data, privKey);\n    } else {\n      signature = serviceProvider.sign(stripHexPrefix(keccak256(stringify(data))));\n    }\n    const metadataParams = {\n      key: toPrivKeyEC(privKey).getPublic(\"hex\"),\n      data,\n      signature,\n      id,\n    };\n    return post<{ status: number; id?: string }>(`${this.hostUrl}/releaseLock`, metadataParams);\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      enableLogging: this.enableLogging,\n      hostUrl: this.hostUrl,\n      storageLayerName: this.storageLayerName,\n    };\n  }\n}\n\nexport default TorusStorageLayer;\n","export { default as MockStorageLayer } from \"./MockStorageLayer\";\nexport { default, default as TorusStorageLayer } from \"./TorusStorageLayer\";\n"],"names":["generateID","getPubKeyPoint","KEY_NOT_FOUND","stringify","MockStorageLayer","dataMap","lockMap","storageLayerName","params","serviceProvider","privKey","usedKey","retrievePubKeyPoint","getX","x","fromMap","toString","Object","create","message","JSON","parse","input","forEach","el","index","status","id","value","undefined","decrypt","ecCurve","encrypt","getPubKeyECC","ONE_KEY_DELETE_NONCE","ONE_KEY_NAMESPACE","prettyPrintError","stripHexPrefix","toPrivKeyEC","toPrivKeyECC","post","BN","keccak256","signDataWithPrivKey","data","sig","sign","toDER","TorusStorageLayer","enableLogging","hostUrl","serverTimeOffset","keyDetails","generateMetadataParams","metadataResponse","encryptedMessage","atob","decrypted","serializeMetadataParamsInput","metadataParams","json","apiError","Error","newInput","Promise","all","map","i","finalMetadataParams","FD","FormData","append","options","mode","method","headers","customOptions","isUrlEncodedData","timeout","pubX","pubY","namespace","setTKeyStore","timestamp","Date","now","hash","slice","unparsedSig","Buffer","from","r","s","pubK","y","point","getY","pub_key_X","pub_key_Y","set_data","signature","Math","floor","key","getPublic","obj","isCommandMessage","bufferMetadata","encryptedDetails","serializedEncryptedDetails","btoa","default"],"sourceRoot":""}