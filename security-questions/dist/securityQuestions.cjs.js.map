{"version":3,"file":"securityQuestions.cjs.js","mappings":"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","sources":["webpack://@tkey/security-questions/webpack/bootstrap","webpack://@tkey/security-questions/webpack/runtime/compat get default export","webpack://@tkey/security-questions/webpack/runtime/define property getters","webpack://@tkey/security-questions/webpack/runtime/hasOwnProperty shorthand","webpack://@tkey/security-questions/webpack/runtime/make namespace object","webpack://@tkey/security-questions/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@tkey/security-questions/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@tkey/security-questions/external commonjs2 \"@babel/runtime/helpers/assertThisInitialized\"","webpack://@tkey/security-questions/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@tkey/security-questions/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@tkey/security-questions/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@tkey/security-questions/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@tkey/security-questions/external commonjs2 \"@tkey/common-types\"","webpack://@tkey/security-questions/./src/errors.ts","webpack://@tkey/security-questions/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@tkey/security-questions/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@tkey/security-questions/external commonjs2 \"bn.js\"","webpack://@tkey/security-questions/external commonjs2 \"web3-utils\"","webpack://@tkey/security-questions/./src/SecurityQuestionStore.ts","webpack://@tkey/security-questions/./src/SecurityQuestionsModule.ts","webpack://@tkey/security-questions/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/assertThisInitialized\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey/common-types\");","import { ErrorCodes, ITkeyError, TkeyError } from \"@tkey/common-types\";\n\nclass SecurityQuestionsError extends TkeyError {\n  protected static messages: ErrorCodes = {\n    2101: \"security questions might not exist/be setup\",\n    2102: \"security questions exists, cant replace, maybe change?\",\n    2103: \"Incorrect answer\",\n    2104: \"no password saved on tkeyStore\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"SecurityQuestionsError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): ITkeyError {\n    return new SecurityQuestionsError(code, `${SecurityQuestionsError.messages[code]}${extraMessage}`);\n  }\n\n  // Custom methods\n  public static unavailable(extraMessage = \"\"): ITkeyError {\n    return SecurityQuestionsError.fromCode(2101, extraMessage);\n  }\n\n  public static unableToReplace(extraMessage = \"\"): ITkeyError {\n    return SecurityQuestionsError.fromCode(2102, extraMessage);\n  }\n\n  public static incorrectAnswer(extraMessage = \"\"): ITkeyError {\n    return SecurityQuestionsError.fromCode(2103, extraMessage);\n  }\n\n  public static noPasswordSaved(extraMessage = \"\"): ITkeyError {\n    return SecurityQuestionsError.fromCode(2104, extraMessage);\n  }\n}\nexport default SecurityQuestionsError;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"web3-utils\");","import { ISerializable, PolynomialID, PublicShare, SecurityQuestionStoreArgs, StringifiedType } from \"@tkey/common-types\";\nimport BN from \"bn.js\";\n\nclass SecurityQuestionStore implements ISerializable {\n  nonce: BN;\n\n  shareIndex: BN;\n\n  sqPublicShare: PublicShare;\n\n  polynomialID: PolynomialID;\n\n  questions: string;\n\n  constructor({ nonce, shareIndex, sqPublicShare, polynomialID, questions }: SecurityQuestionStoreArgs) {\n    this.nonce = new BN(nonce, \"hex\");\n    this.shareIndex = new BN(shareIndex, \"hex\");\n    this.sqPublicShare = new PublicShare(sqPublicShare.shareIndex, sqPublicShare.shareCommitment);\n    this.polynomialID = polynomialID;\n    this.questions = questions;\n  }\n\n  static fromJSON(value: StringifiedType): SecurityQuestionStore {\n    const { nonce, shareIndex, sqPublicShare, polynomialID, questions } = value;\n    return new SecurityQuestionStore({\n      nonce: new BN(nonce, \"hex\"),\n      shareIndex: new BN(shareIndex, \"hex\"),\n      sqPublicShare: PublicShare.fromJSON(sqPublicShare),\n      polynomialID,\n      questions,\n    });\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      nonce: this.nonce.toString(\"hex\"),\n      shareIndex: this.shareIndex.toString(\"hex\"),\n      sqPublicShare: this.sqPublicShare,\n      polynomialID: this.polynomialID.toString(),\n      questions: this.questions,\n    };\n  }\n}\nexport default SecurityQuestionStore;\n","import {\n  ecCurve,\n  GenerateNewShareResult,\n  IModule,\n  isEmptyObject,\n  ISQAnswerStore,\n  ITKeyApi,\n  SecurityQuestionStoreArgs,\n  Share,\n  ShareStore,\n  ShareStoreMap,\n} from \"@tkey/common-types\";\nimport BN from \"bn.js\";\nimport { keccak256 } from \"web3-utils\";\n\nimport SecurityQuestionsError from \"./errors\";\nimport SecurityQuestionStore from \"./SecurityQuestionStore\";\n\nfunction answerToUserInputHashBN(answerString: string): BN {\n  return new BN(keccak256(answerString).slice(2), \"hex\");\n}\n\nexport const SECURITY_QUESTIONS_MODULE_NAME = \"securityQuestions\";\nconst TKEYSTORE_ID = \"answer\";\n\nclass SecurityQuestionsModule implements IModule {\n  moduleName: string;\n\n  tbSDK: ITKeyApi;\n\n  saveAnswers: boolean;\n\n  constructor(saveAnswers?: boolean) {\n    this.saveAnswers = saveAnswers;\n    this.moduleName = SECURITY_QUESTIONS_MODULE_NAME;\n  }\n\n  static refreshSecurityQuestionsMiddleware(generalStore: unknown, oldShareStores: ShareStoreMap, newShareStores: ShareStoreMap): unknown {\n    if (generalStore === undefined || isEmptyObject(generalStore)) {\n      return generalStore;\n    }\n    const sqStore = new SecurityQuestionStore(generalStore as SecurityQuestionStoreArgs);\n    const sqIndex = sqStore.shareIndex.toString(\"hex\");\n\n    // Assumption: If sqIndex doesn't exist, it must have been explicitly deleted.\n    if (oldShareStores[sqIndex] && newShareStores[sqIndex]) {\n      const sqAnswer = oldShareStores[sqIndex].share.share.sub(sqStore.nonce);\n      let newNonce = newShareStores[sqIndex].share.share.sub(sqAnswer);\n      newNonce = newNonce.umod(ecCurve.curve.n);\n\n      return new SecurityQuestionStore({\n        nonce: newNonce,\n        polynomialID: newShareStores[Object.keys(newShareStores)[0]].polynomialID,\n        sqPublicShare: newShareStores[sqIndex].share.getPublicShare(),\n        shareIndex: sqStore.shareIndex,\n        questions: sqStore.questions,\n      });\n    }\n    return undefined;\n  }\n\n  setModuleReferences(tbSDK: ITKeyApi): void {\n    this.tbSDK = tbSDK;\n    this.tbSDK._addRefreshMiddleware(this.moduleName, SecurityQuestionsModule.refreshSecurityQuestionsMiddleware);\n  }\n\n  // eslint-disable-next-line\n  async initialize(): Promise<void> {}\n\n  async generateNewShareWithSecurityQuestions(answerString: string, questions: string): Promise<GenerateNewShareResult> {\n    const metadata = this.tbSDK.getMetadata();\n    // TODO: throw in case of TSS\n    const rawSqStore = metadata.getGeneralStoreDomain(this.moduleName);\n    if (rawSqStore) throw SecurityQuestionsError.unableToReplace();\n    const newSharesDetails = await this.tbSDK.generateNewShare();\n    const newShareStore = newSharesDetails.newShareStores[newSharesDetails.newShareIndex.toString(\"hex\")];\n    const userInputHash = answerToUserInputHashBN(answerString);\n    let nonce = newShareStore.share.share.sub(userInputHash);\n    nonce = nonce.umod(ecCurve.curve.n);\n    const sqStore = new SecurityQuestionStore({\n      nonce,\n      questions,\n      sqPublicShare: newShareStore.share.getPublicShare(),\n      shareIndex: newShareStore.share.shareIndex,\n      polynomialID: newShareStore.polynomialID,\n    });\n    metadata.setGeneralStoreDomain(this.moduleName, sqStore);\n\n    await this.tbSDK.addShareDescription(\n      newSharesDetails.newShareIndex.toString(\"hex\"),\n      JSON.stringify({ module: this.moduleName, questions, dateAdded: Date.now() }),\n      false // READ TODO1 (don't sync metadata)\n    );\n    // set on tkey store\n    await this.saveAnswerOnTkeyStore(answerString);\n    await this.tbSDK._syncShareMetadata();\n    return newSharesDetails;\n  }\n\n  getSecurityQuestions(): string {\n    const metadata = this.tbSDK.getMetadata();\n    const sqStore = new SecurityQuestionStore(metadata.getGeneralStoreDomain(this.moduleName) as SecurityQuestionStoreArgs);\n    return sqStore.questions;\n  }\n\n  async inputShareFromSecurityQuestions(answerString: string): Promise<void> {\n    const metadata = this.tbSDK.getMetadata();\n    const rawSqStore = metadata.getGeneralStoreDomain(this.moduleName);\n    if (!rawSqStore) throw SecurityQuestionsError.unavailable();\n\n    const sqStore = new SecurityQuestionStore(rawSqStore as SecurityQuestionStoreArgs);\n    const userInputHash = answerToUserInputHashBN(answerString);\n    let share = sqStore.nonce.add(userInputHash);\n    share = share.umod(ecCurve.curve.n);\n    const shareStore = new ShareStore(new Share(sqStore.shareIndex, share), sqStore.polynomialID);\n    // validate if share is correct\n    const derivedPublicShare = shareStore.share.getPublicShare();\n    if (derivedPublicShare.shareCommitment.x.cmp(sqStore.sqPublicShare.shareCommitment.x) !== 0) {\n      throw SecurityQuestionsError.incorrectAnswer();\n    }\n\n    const latestShareDetails = await this.tbSDK.catchupToLatestShare({ shareStore, includeLocalMetadataTransitions: true });\n    // TODO: update share nonce on all metadata. would be cleaner in long term?\n    // if (shareStore.polynomialID !== latestShareDetails.latestShare.polynomialID) this.storeDeviceShare(latestShareDetails.latestShare);\n    this.tbSDK.inputShareStore(latestShareDetails.latestShare);\n  }\n\n  async changeSecurityQuestionAndAnswer(newAnswerString: string, newQuestions: string): Promise<void> {\n    const metadata = this.tbSDK.getMetadata();\n    const rawSqStore = metadata.getGeneralStoreDomain(this.moduleName);\n    if (!rawSqStore) throw SecurityQuestionsError.unavailable();\n\n    const sqStore = new SecurityQuestionStore(rawSqStore as SecurityQuestionStoreArgs);\n\n    const userInputHash = answerToUserInputHashBN(newAnswerString);\n    const sqShare = this.tbSDK.outputShareStore(sqStore.shareIndex);\n    let nonce = sqShare.share.share.sub(userInputHash);\n    nonce = nonce.umod(ecCurve.curve.n);\n\n    const newSqStore = new SecurityQuestionStore({\n      nonce,\n      polynomialID: sqStore.polynomialID,\n      sqPublicShare: sqStore.sqPublicShare,\n      shareIndex: sqStore.shareIndex,\n      questions: newQuestions,\n    });\n    metadata.setGeneralStoreDomain(this.moduleName, newSqStore);\n    await this.saveAnswerOnTkeyStore(newAnswerString);\n    await this.tbSDK._syncShareMetadata();\n  }\n\n  async saveAnswerOnTkeyStore(answerString: string): Promise<void> {\n    if (!this.saveAnswers) return;\n\n    const answerStore: ISQAnswerStore = {\n      answer: answerString,\n      id: TKEYSTORE_ID,\n    };\n    await this.tbSDK._setTKeyStoreItem(this.moduleName, answerStore, false);\n  }\n\n  async getAnswer(): Promise<string> {\n    //  TODO: TODO1 edit setTKeyStoreItem to not sync all the time.\n    if (this.saveAnswers) {\n      const answerStore = (await this.tbSDK.getTKeyStoreItem(this.moduleName, TKEYSTORE_ID)) as ISQAnswerStore;\n      return answerStore.answer;\n    }\n    throw SecurityQuestionsError.noPasswordSaved();\n  }\n}\n\nexport default SecurityQuestionsModule;\n","export { default as SecurityQuestionsError } from \"./errors\";\nexport { default, SECURITY_QUESTIONS_MODULE_NAME, default as SecurityQuestionsModule } from \"./SecurityQuestionsModule\";\nexport { default as SecurityQuestionStore } from \"./SecurityQuestionStore\";\n"],"names":["TkeyError","SecurityQuestionsError","code","message","Object","defineProperty","value","extraMessage","messages","fromCode","PublicShare","BN","SecurityQuestionStore","nonce","shareIndex","sqPublicShare","polynomialID","questions","shareCommitment","toString","fromJSON","ecCurve","isEmptyObject","Share","ShareStore","keccak256","answerToUserInputHashBN","answerString","slice","SECURITY_QUESTIONS_MODULE_NAME","TKEYSTORE_ID","SecurityQuestionsModule","saveAnswers","moduleName","tbSDK","_addRefreshMiddleware","refreshSecurityQuestionsMiddleware","metadata","getMetadata","rawSqStore","getGeneralStoreDomain","unableToReplace","generateNewShare","newSharesDetails","newShareStore","newShareStores","newShareIndex","userInputHash","share","sub","umod","curve","n","sqStore","getPublicShare","setGeneralStoreDomain","addShareDescription","JSON","stringify","module","dateAdded","Date","now","saveAnswerOnTkeyStore","_syncShareMetadata","unavailable","add","shareStore","derivedPublicShare","x","cmp","incorrectAnswer","catchupToLatestShare","includeLocalMetadataTransitions","latestShareDetails","inputShareStore","latestShare","newAnswerString","newQuestions","sqShare","outputShareStore","newSqStore","answerStore","answer","id","_setTKeyStoreItem","getTKeyStoreItem","noPasswordSaved","generalStore","oldShareStores","undefined","sqIndex","sqAnswer","newNonce","keys","default"],"sourceRoot":""}