{"version":3,"file":"shareTransfer.cjs.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;ACNA,MAAM,8BAA4B;;;ACAlC,MAAM,2BAA4B;;;ACAlC,MAAM,qCAA4B;;;ACAlC,MAAM,wBAA4B;;;ACAlC,MAAM,yCAA4B;;;ACAlC,MAAM,8BAA4B;;;ACAlC,MAAM,8BAA4B;;;ACAlC,MAAM,4BAA4B;;;;;;;;;;;ACAqC;AAAA,IAEjEC,kBAAkB;EAAA;EAAA;EAStB,4BAAmBC,IAAY,EAAEC,OAAgB,EAAE;IAAA;IAAA;IACjD;IACA,0BAAMD,IAAI,EAAEC,OAAO;IACnB;IACAC,MAAM,CAACC,cAAc,CAAC,wCAAM,MAAM,EAAE;MAAEC,KAAK,EAAE;IAAqB,CAAC,CAAC;IAAC;EACvE;EAAC;IAAA;IAAA,OAED,kBAAuBJ,IAAY,EAAiC;MAAA,IAA/BK,YAAY,uEAAG,EAAE;MACpD,OAAO,IAAIN,kBAAkB,CAACC,IAAI,YAAKD,kBAAkB,CAACO,QAAQ,CAACN,IAAI,CAAC,SAAGK,YAAY,EAAG;IAC5F;EAAC;IAAA;IAAA,OAED,oBAAqD;MAAA,IAA/BA,YAAY,uEAAG,EAAE;MACrC,OAAO,IAAIN,kBAAkB,CAAC,IAAI,YAAKA,kBAAkB,CAACO,QAAQ,CAAC,IAAI,CAAC,SAAGD,YAAY,EAAG;IAC5F;;IAEA;EAAA;IAAA;IAAA,OACA,gCAAkE;MAAA,IAA/BA,YAAY,uEAAG,EAAE;MAClD,OAAON,kBAAkB,CAACQ,QAAQ,CAAC,IAAI,EAAEF,YAAY,CAAC;IACxD;EAAC;IAAA;IAAA,OAED,yBAA2D;MAAA,IAA/BA,YAAY,uEAAG,EAAE;MAC3C,OAAON,kBAAkB,CAACQ,QAAQ,CAAC,IAAI,EAAEF,YAAY,CAAC;IACxD;EAAC;IAAA;IAAA,OAED,gCAAkE;MAAA,IAA/BA,YAAY,uEAAG,EAAE;MAClD,OAAON,kBAAkB,CAACQ,QAAQ,CAAC,IAAI,EAAEF,YAAY,CAAC;IACxD;EAAC;EAAA;AAAA,EAnC8BP,sCAAS;AAAA,yBAApCC,kBAAkB,cACkB;EACtC,IAAI,EAAE,QAAQ;EACd;EACA,IAAI,EAAE,yBAAyB;EAC/B,IAAI,EAAE,gCAAgC;EACtC,IAAI,EAAE;AACR,CAAC;AA8BH,6CAAeA,kBAAkB;;;;;ICrC3BS,YAAY,sCAehB,4BAAqH;EAAA,IAAvGC,SAAS,QAATA,SAAS;IAAEC,iBAAiB,QAAjBA,iBAAiB;IAAEC,qBAAqB,QAArBA,qBAAqB;IAAEC,SAAS,QAATA,SAAS;IAAEC,MAAM,QAANA,MAAM;IAAEC,SAAS,QAATA,SAAS;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAC7F,IAAMC,aAAa,GAAGN,SAAsB;EAC5C,IAAIM,aAAa,CAACC,IAAI,KAAK,QAAQ,EAAE;IACnC,IAAI,CAACP,SAAS,GAAGQ,MAAM,CAACC,IAAI,CAACH,aAAa,CAACI,IAAI,CAAC;EAClD,CAAC,MAAM;IACL,IAAI,CAACV,SAAS,GAAGA,SAA8B;EACjD;EACA,IAAI,CAACE,qBAAqB,GAAGA,qBAAqB;EAClD,IAAI,CAACD,iBAAiB,GAAGA,iBAAiB;EAC1C,IAAI,CAACE,SAAS,GAAGA,SAAS;EAC1B,IAAI,CAACC,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACC,SAAS,GAAGA,SAAS;AAC5B,CAAC;AAGH,uDAAeN,YAAY;;AChC3B,MAAM,6BAA4B;;;ACAlC,MAAM,gCAA4B;;;ACAlC,MAAM,2BAA4B;;;ACAlC,MAAM,wBAA4B;;ACAlC,MAAM,8BAA4B;;;;;;ACCX;AAAA,IAEjBa,yBAAyB,sCAG7B,yCAAwD;EAAA,IAA1CC,OAAO,QAAPA,OAAO;EAAA;EAAA;EACnB,IAAI,CAACA,OAAO,GAAG,IAAIF,0BAAE,CAACE,OAAO,EAAE,KAAK,CAAC;AACvC,CAAC;AAEH,oEAAeD,yBAAyB;;ACVxC,MAAM,4BAA4B;;;;ACAuB;AAElD,SAAeG,WAAW;EAAA;AAAA;AAgBhC;EAAA,mFAhBM;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA;YAAA,OAEUD,+CAAc,CACzB,KAAK,EACLE,KAAK,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,UAACC,QAAQ,EAAK;cACpD,IAAIA,QAAQ,CAACC,EAAE,EAAE;gBACf,OAAOD,QAAQ,CAACE,IAAI,EAAE;cACxB;cACA;cACA,MAAMF,QAAQ;YAChB,CAAC,CAAC,CACH;UAAA;YAAA;UAAA;YAAA;YAAA;YAAA,iCAGM,EAAE;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAEZ;EAAA;AAAA;;;;;;;;ACN2B;AAC0B;AAC/B;AAEmB;AACA;AAC0B;AAC9B;AAM/B,IAAMU,0BAA0B,GAAG,eAAe;AAAC,IAEpDC,mBAAmB;EAWvB,+BAAc;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IACZ,IAAI,CAACC,UAAU,GAAGF,0BAA0B;IAC5C,IAAI,CAACG,0BAA0B,GAAG,IAAI;EACxC;EAAC;IAAA;IAAA,OAmBD,6BAAoBC,KAAe,EAAQ;MACzC,IAAI,CAACA,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACA,KAAK,CAACC,qBAAqB,CAAC,IAAI,CAACH,UAAU,EAAED,mBAAmB,CAACK,8BAA8B,CAAC;IACvG;EAAC;IAAA;IAAA,OAED,uCAA8BC,QAAgB,EAAQ;MACpD,IAAI,CAACJ,0BAA0B,GAAGI,QAAQ;IAC5C;EAAC;IAAA;IAAA;MAAA,sFAED;QAAA;QAAA;UAAA;YAAA;cAAA;gBACQC,QAAQ,GAAG,IAAI,CAACJ,KAAK,CAACK,WAAW,EAAE;gBACnCC,4BAA4B,GAAGF,QAAQ,CAACG,qBAAqB,CAAC,IAAI,CAACT,UAAU,CAAC;gBAEpF,IAAI,CAACQ,4BAA4B,EAAE;kBACjCE,yBAAyB,GAAG;oBAAE3B,OAAO,EAAE,IAAIF,0BAAE,CAACgB,4CAAe,EAAE;kBAAE,CAAC;kBAClES,QAAQ,CAACK,qBAAqB,CAAC,IAAI,CAACX,UAAU,EAAEU,yBAAyB,CAAC;kBAC1E;kBACA;gBACF,CAAC,MAAM;kBACLA,yBAAyB,GAAG,IAAI5B,6BAAyB,CAAC0B,4BAA4B,CAAC;gBACzF;cAAC;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACF;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,2FAED,kBACEnC,SAAiB,EACjBD,qBAAoC,EACpCwC,QAA8D;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,KAE1D,IAAI,CAACC,aAAa;kBAAA;kBAAA;gBAAA;gBAAA,MAAQrD,oBAAgC,WAAI,IAAI,CAACqD,aAAa,CAACE,QAAQ,CAAC,KAAK,CAAC,EAAG;cAAA;gBACvG,IAAI,CAACF,aAAa,GAAG,IAAIhC,0BAAE,CAACgB,4CAAe,EAAE,CAAC;gBAAC;gBAAA,OACDmB,OAAO,CAACC,GAAG,CAAC,CAAC,IAAI,CAACC,qBAAqB,EAAE,EAAEjC,WAAW,EAAE,CAAC,CAAC;cAAA;gBAAA;gBAAA;gBAAjGkC,qBAAqB;gBAAE7C,MAAM;gBAC9B8C,UAAU,GAAG1B,+CAAc,CAAC,IAAI,CAACmB,aAAa,CAAC,CAACQ,CAAC,CAACN,QAAQ,CAAC,KAAK,CAAC;gBACvEI,qBAAqB,CAACC,UAAU,CAAC,GAAG,IAAInD,gBAAY,CAAC;kBACnDC,SAAS,EAAEuB,6CAAY,CAAC,IAAI,CAACoB,aAAa,CAAC;kBAC3C1C,iBAAiB,EAAEmD,SAAS;kBAC5BlD,qBAAqB,EAArBA,qBAAqB;kBACrBC,SAAS,EAATA,SAAS;kBACTC,MAAM,EAANA,MAAM;kBACNC,SAAS,EAAEgD,IAAI,CAACC,GAAG;gBACrB,CAAC,CAAC;gBAAC;gBAAA,OACG,IAAI,CAACC,qBAAqB,CAACN,qBAAqB,CAAC;cAAA;gBACvD;gBACA,IAAIP,QAAQ,EAAE;kBACZ,IAAI,CAACc,oBAAoB,GAAGC,MAAM,CAChCC,WAAW,mFAAC;oBAAA;oBAAA;sBAAA;wBAAA;0BAAA;4BAAA;4BAAA;4BAAA,OAE+B,KAAI,CAACV,qBAAqB,EAAE;0BAAA;4BAA7DW,wBAAwB;4BAAA,IACzB,KAAI,CAAChB,aAAa;8BAAA;8BAAA;4BAAA;4BAAA,MAAQrD,2BAAuC,EAAE;0BAAA;4BAAA,KACpEqE,wBAAwB,CAACT,UAAU,CAAC,CAACjD,iBAAiB;8BAAA;8BAAA;4BAAA;4BAAA;4BAAA,OAC5BoB,wCAAO,CAACK,6CAAY,CAAC,KAAI,CAACiB,aAAa,CAAC,EAAEgB,wBAAwB,CAACT,UAAU,CAAC,CAACjD,iBAAiB,CAAC;0BAAA;4BAAvH4D,aAAa;4BACbC,aAAa,GAAGrC,gDAAmB,CAACuC,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAChB,QAAQ,EAAE,CAAC,CAAC;4BAAA;4BAAA,OACzE,KAAI,CAACb,KAAK,CAACkC,mBAAmB,CAACJ,aAAa,EAAE,IAAI,CAAC;0BAAA;4BACzD,KAAI,CAACK,sBAAsB,EAAE;4BAC7BzB,QAAQ,CAAC,IAAI,EAAEoB,aAAa,CAAC;4BAAC;4BAAA;0BAAA;4BACzB,IAAI,CAACH,wBAAwB,CAACT,UAAU,CAAC,EAAE;8BAChD,KAAI,CAACiB,sBAAsB,EAAE;8BAC7BzB,QAAQ,CAACpD,2BAAuC,EAAE,CAAC;4BACrD;0BAAC;4BAAA;4BAAA;0BAAA;4BAAA;4BAAA;4BAED,KAAI,CAAC6E,sBAAsB,EAAE;4BAC7BzB,QAAQ,cAAO;0BAAC;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CAEnB,IAAE,IAAI,CAACX,0BAA0B,CAAC,CACpC;gBACH;gBAAC,kCACMmB,UAAU;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAClB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,uGAED,kBAAkCA,UAAkB,EAAEmB,UAAkB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACrC,IAAI,CAACrB,qBAAqB,EAAE;cAAA;gBAAvDsB,kBAAkB;gBAAA,IACnBA,kBAAkB,CAACpB,UAAU,CAAC;kBAAA;kBAAA;gBAAA;gBAAA,MAAQ5D,2BAAuC,EAAE;cAAA;gBACpFgF,kBAAkB,CAACpB,UAAU,CAAC,CAACmB,UAAU,GAAGA,UAAU;gBAAC;gBAAA,OACjD,IAAI,CAACd,qBAAqB,CAACe,kBAAkB,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACrD;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,2FAED;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACmC,IAAI,CAACtB,qBAAqB,EAAE;cAAA;gBAAvDsB,kBAAkB;gBAAA,kCACjB7E,MAAM,CAAC8E,IAAI,CAACD,kBAAkB,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACvC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,0FAED,kBAAqBpB,UAAkB,EAAEsB,UAAuB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OAC7B,IAAI,CAACxB,qBAAqB,EAAE;cAAA;gBAAvDsB,kBAAkB;gBAAA,IACnBA,kBAAkB,CAACpB,UAAU,CAAC;kBAAA;kBAAA;gBAAA;gBAAA,MAAQ5D,2BAAuC,EAAE;cAAA;gBAGpF,IAAIkF,UAAU,EAAE;kBACdC,aAAa,GAAGjE,MAAM,CAACC,IAAI,CAACuD,IAAI,CAACU,SAAS,CAACF,UAAU,CAAC,CAAC;gBACzD,CAAC,MAAM;kBACCG,KAAK,GAAG,IAAI5E,gBAAY,CAACuE,kBAAkB,CAACpB,UAAU,CAAC,CAAC;kBACtDhD,qBAAqB,GAAKyE,KAAK,CAA/BzE,qBAAqB;kBACvBkC,QAAQ,GAAG,IAAI,CAACJ,KAAK,CAACK,WAAW,EAAE;kBACnCuC,gBAAgB,GAAGxC,QAAQ,CAACyC,yBAAyB,EAAE;kBACvDC,kBAAkB,GAAGF,gBAAgB,CAACG,eAAe,EAAE;kBACvDC,OAAO,GAAG5C,QAAQ,CAAC6C,4BAA4B,CAACH,kBAAkB,CAAC;kBACnEI,QAAQ,GAAGF,OAAO,CAACG,MAAM,CAAC,UAACC,EAAE;oBAAA,OAAK,CAAClF,qBAAqB,CAACmF,QAAQ,CAACD,EAAE,CAAC;kBAAA,EAAC;kBACtEE,KAAK,GAAG,IAAI,CAACtD,KAAK,CAACuD,gBAAgB,CAACL,QAAQ,CAAC,CAAC,CAAC,CAAC;kBACtDT,aAAa,GAAGjE,MAAM,CAACC,IAAI,CAACuD,IAAI,CAACU,SAAS,CAACY,KAAK,CAAC,CAAC;gBACpD;gBACME,YAAY,GAAG,IAAIzF,gBAAY,CAACuE,kBAAkB,CAACpB,UAAU,CAAC,CAAC;gBAAA;gBAAA,OACZ5B,wCAAO,CAACkE,YAAY,CAACxF,SAAS,EAAEyE,aAAa,CAAC;cAAA;gBAAvGH,kBAAkB,CAACpB,UAAU,CAAC,CAACjD,iBAAiB;gBAAA;gBAAA,OAC1C,IAAI,CAACsD,qBAAqB,CAACe,kBAAkB,CAAC;cAAA;gBACpD,IAAI,CAAC3B,aAAa,GAAGS,SAAS;cAAC;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAChC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,wGAED,kBAAmCF,UAAkB,EAAEuC,UAAkB;QAAA;QAAA;UAAA;YAAA;cAAA;gBACjEC,WAAW,GAAG,IAAI,CAAC1D,KAAK,CAACuD,gBAAgB,CAACE,UAAU,CAAC;gBAAA,kCACpD,IAAI,CAACE,cAAc,CAACzC,UAAU,EAAEwC,WAAW,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACpD;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,iGAED;QAAA;QAAA;UAAA;YAAA;cAAA;gBACQtD,QAAQ,GAAG,IAAI,CAACJ,KAAK,CAACK,WAAW,EAAE;gBACnCG,yBAAyB,GAAG,IAAI5B,6BAAyB,CAACwB,QAAQ,CAACG,qBAAqB,CAAC,IAAI,CAACT,UAAU,CAAC,CAAkC;gBAC3I8D,YAAY,GAAG,IAAI,CAAC5D,KAAK,CAAC6D,eAAe,EAAE;gBAAA,kCAC1CD,YAAY,CAACvD,WAAW,CAAqB;kBAAEyD,OAAO,EAAEtD,yBAAyB,CAAC3B;gBAAQ,CAAC,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACpG;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,iGAED,kBAA4ByD,kBAAsC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAC1DlC,QAAQ,GAAG,IAAI,CAACJ,KAAK,CAACK,WAAW,EAAE;gBACnCG,yBAAyB,GAAG,IAAI5B,6BAAyB,CAACwB,QAAQ,CAACG,qBAAqB,CAAC,IAAI,CAACT,UAAU,CAAC,CAAkC;gBAC3I8D,YAAY,GAAG,IAAI,CAAC5D,KAAK,CAAC6D,eAAe,EAAE;gBAAA;gBAAA,OAC3CD,YAAY,CAACG,WAAW,CAAC;kBAAEC,KAAK,EAAE1B,kBAAkB;kBAAEwB,OAAO,EAAEtD,yBAAyB,CAAC3B;gBAAQ,CAAC,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC1G;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,mGAED,mBAA8BqC,UAAkB,EAAE+C,4BAAqC;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,mCAE9E,IAAInD,OAAO,CAAC,UAACoD,OAAO,EAAEC,MAAM,EAAK;kBACtC,MAAI,CAAC3C,oBAAoB,GAAGC,MAAM,CAChCC,WAAW,mFAAC;oBAAA;oBAAA;sBAAA;wBAAA;0BAAA;4BAAA;4BAAA;4BAAA,OAE+B,MAAI,CAACV,qBAAqB,EAAE;0BAAA;4BAA7DW,wBAAwB;4BAAA,IACzB,MAAI,CAAChB,aAAa;8BAAA;8BAAA;4BAAA;4BAAA,MAAQrD,2BAAuC,EAAE;0BAAA;4BAAA,IACnEqE,wBAAwB,CAACT,UAAU,CAAC;8BAAA;8BAAA;4BAAA;4BACvC,MAAI,CAACiB,sBAAsB,EAAE;4BAC7BgC,MAAM,CAAC7G,2BAAuC,EAAE,CAAC;4BAAC;4BAAA;0BAAA;4BAAA,KACzCqE,wBAAwB,CAACT,UAAU,CAAC,CAACjD,iBAAiB;8BAAA;8BAAA;4BAAA;4BAAA;4BAAA,OACnCoB,wCAAO,CAACK,6CAAY,CAAC,MAAI,CAACiB,aAAa,CAAC,EAAEgB,wBAAwB,CAACT,UAAU,CAAC,CAACjD,iBAAiB,CAAC;0BAAA;4BAAvH4D,aAAa;4BACbC,aAAa,GAAGrC,gDAAmB,CAACuC,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAChB,QAAQ,EAAE,CAAC,CAAC;4BAAA;4BAAA,OACzE,MAAI,CAACb,KAAK,CAACkC,mBAAmB,CAACJ,aAAa,EAAE,IAAI,CAAC;0BAAA;4BAAA,KACrDmC,4BAA4B;8BAAA;8BAAA;4BAAA;4BAAA;4BAAA,OACxB,MAAI,CAACG,wBAAwB,CAAClD,UAAU,CAAC;0BAAA;4BAEjD,MAAI,CAACiB,sBAAsB,EAAE;4BAC7B+B,OAAO,CAACpC,aAAa,CAAC;0BAAC;4BAAA;4BAAA;0BAAA;4BAAA;4BAAA;4BAGzB,MAAI,CAACK,sBAAsB,EAAE;4BAC7BgC,MAAM,eAAK;0BAAC;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CAEf,IAAE,MAAI,CAACpE,0BAA0B,CAAC,CACpC;gBACH,CAAC,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACH;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,oGAED;QAAA;UAAA;YAAA;cAAA;gBACEsE,aAAa,CAAC,IAAI,CAAC7C,oBAAoB,CAAC;cAAC;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC1C;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,oGAED,mBAA+BxD,SAAiB;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACN,IAAI,CAACgD,qBAAqB,EAAE;cAAA;gBAA9DsD,yBAAyB;gBAC/B,OAAOA,yBAAyB,CAACtG,SAAS,CAAC;gBAAC;gBAAA,OACtC,IAAI,CAACuD,qBAAqB,CAAC+C,yBAAyB,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC5D;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,mGAED;QAAA;QAAA;UAAA;YAAA;cAAA;gBACQlE,QAAQ,GAAG,IAAI,CAACJ,KAAK,CAACK,WAAW,EAAE;gBACnCG,yBAAyB,GAAG;kBAAE3B,OAAO,EAAE,IAAIF,0BAAE,CAACgB,4CAAe,EAAE;gBAAE,CAAC;gBACxES,QAAQ,CAACK,qBAAqB,CAAC,IAAI,CAACX,UAAU,EAAEU,yBAAyB,CAAC;gBAAC;gBAAA,OACrE,IAAI,CAACR,KAAK,CAACuE,kBAAkB,EAAE;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACtC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OAED,kCAAuC;MACrC,IAAI,CAAC5D,aAAa,GAAGS,SAAS;MAC9BiD,aAAa,CAAC,IAAI,CAAC7C,oBAAoB,CAAC;IAC1C;EAAC;IAAA;IAAA,OA9LD,wCACEgD,YAAqB,EACrBC,cAA6B,EAC7BC,cAA6B,EACF;MAC3B,IAAMC,iBAAiB,GAAGlH,MAAM,CAAC8E,IAAI,CAACkC,cAAc,CAAC,CAACG,MAAM;MAC5D,IAAMC,iBAAiB,GAAGpH,MAAM,CAAC8E,IAAI,CAACmC,cAAc,CAAC,CAACE,MAAM;;MAE5D;MACA,IAAIC,iBAAiB,IAAIF,iBAAiB,EAAE;QAC1C,IAAMnE,yBAAoD,GAAG;UAAE3B,OAAO,EAAE,IAAIF,0BAAE,CAACgB,4CAAe,EAAE;QAAE,CAAC;QACnG,OAAOa,yBAAyB;MAClC;MAEA,OAAOgE,YAAY;IACrB;EAAC;EAAA;AAAA;AAkLH,8DAAe3E,mBAAmB;;AC5OuB;AACA;AACuB;AAC1C","sources":["webpack://@tkey/share-transfer/webpack/bootstrap","webpack://@tkey/share-transfer/webpack/runtime/compat get default export","webpack://@tkey/share-transfer/webpack/runtime/define property getters","webpack://@tkey/share-transfer/webpack/runtime/hasOwnProperty shorthand","webpack://@tkey/share-transfer/webpack/runtime/make namespace object","webpack://@tkey/share-transfer/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@tkey/share-transfer/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@tkey/share-transfer/external commonjs2 \"@babel/runtime/helpers/assertThisInitialized\"","webpack://@tkey/share-transfer/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@tkey/share-transfer/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@tkey/share-transfer/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@tkey/share-transfer/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@tkey/share-transfer/external commonjs2 \"@tkey/common-types\"","webpack://@tkey/share-transfer/./src/errors.ts","webpack://@tkey/share-transfer/./src/ShareRequest.ts","webpack://@tkey/share-transfer/external commonjs2 \"@babel/runtime/helpers/slicedToArray\"","webpack://@tkey/share-transfer/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@tkey/share-transfer/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@tkey/share-transfer/external commonjs2 \"@toruslabs/eccrypto\"","webpack://@tkey/share-transfer/external commonjs2 \"bn.js\"","webpack://@tkey/share-transfer/./src/ShareTransferStorePointer.ts","webpack://@tkey/share-transfer/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@tkey/share-transfer/./src/utils.ts","webpack://@tkey/share-transfer/./src/ShareTransferModule.ts","webpack://@tkey/share-transfer/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/assertThisInitialized\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@tkey/common-types\");","import { ErrorCodes, ITkeyError, TkeyError } from \"@tkey/common-types\";\n\nclass ShareTransferError extends TkeyError {\n  protected static messages: ErrorCodes = {\n    8000: \"Custom\",\n    // Misc\n    8010: \"Missing current enc key\",\n    8011: \"Current request already exists\",\n    8012: \"User cancelled request\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"ShareTransferError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): ITkeyError {\n    return new ShareTransferError(code, `${ShareTransferError.messages[code]}${extraMessage}`);\n  }\n\n  public static default(extraMessage = \"\"): ITkeyError {\n    return new ShareTransferError(8000, `${ShareTransferError.messages[8000]}${extraMessage}`);\n  }\n\n  // Custom methods\n  public static missingEncryptionKey(extraMessage = \"\"): ITkeyError {\n    return ShareTransferError.fromCode(8010, extraMessage);\n  }\n\n  public static requestExists(extraMessage = \"\"): ITkeyError {\n    return ShareTransferError.fromCode(8011, extraMessage);\n  }\n\n  public static userCancelledRequest(extraMessage = \"\"): ITkeyError {\n    return ShareTransferError.fromCode(8012, extraMessage);\n  }\n}\nexport default ShareTransferError;\n","import { BufferObj, EncryptedMessage, ShareRequestArgs } from \"@tkey/common-types\";\n\nclass ShareRequest {\n  encPubKey: Buffer;\n\n  encShareInTransit: EncryptedMessage;\n\n  availableShareIndexes: Array<string>;\n\n  userAgent: string;\n\n  customInfo: string;\n\n  userIp: string;\n\n  timestamp: number;\n\n  constructor({ encPubKey, encShareInTransit, availableShareIndexes, userAgent, userIp, timestamp }: ShareRequestArgs) {\n    const testEncPubKey = encPubKey as BufferObj;\n    if (testEncPubKey.type === \"Buffer\") {\n      this.encPubKey = Buffer.from(testEncPubKey.data);\n    } else {\n      this.encPubKey = encPubKey as unknown as Buffer;\n    }\n    this.availableShareIndexes = availableShareIndexes;\n    this.encShareInTransit = encShareInTransit;\n    this.userAgent = userAgent;\n    this.userIp = userIp;\n    this.timestamp = timestamp;\n  }\n}\n\nexport default ShareRequest;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","import { ShareTransferStorePointerArgs } from \"@tkey/common-types\";\nimport BN from \"bn.js\";\n\nclass ShareTransferStorePointer {\n  pointer: BN;\n\n  constructor({ pointer }: ShareTransferStorePointerArgs) {\n    this.pointer = new BN(pointer, \"hex\");\n  }\n}\nexport default ShareTransferStorePointer;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","import { promiseTimeout } from \"@toruslabs/http-helpers\";\n\nexport async function getClientIp(): Promise<string> {\n  try {\n    return await promiseTimeout(\n      10000,\n      fetch(\"https://icanhazip.com\", {}).then((response) => {\n        if (response.ok) {\n          return response.text();\n        }\n        // eslint-disable-next-line @typescript-eslint/no-throw-literal\n        throw response;\n      })\n    );\n  } catch (_) {\n    // returning empty ip in case ip service server might be down or slow.\n    return \"\";\n  }\n}\n","import {\n  decrypt,\n  encrypt,\n  getPubKeyECC,\n  getPubKeyPoint,\n  IModule,\n  ITKeyApi,\n  ITkeyError,\n  ShareStore,\n  ShareStoreMap,\n  ShareTransferStorePointerArgs,\n  toPrivKeyECC,\n} from \"@tkey/common-types\";\nimport { generatePrivate } from \"@toruslabs/eccrypto\";\nimport BN from \"bn.js\";\n\nimport ShareTransferError from \"./errors\";\nimport ShareRequest from \"./ShareRequest\";\nimport ShareTransferStorePointer from \"./ShareTransferStorePointer\";\nimport { getClientIp } from \"./utils\";\n\nexport type ShareTransferStore = {\n  [encPubKeyX: string]: ShareRequest;\n};\n\nexport const SHARE_TRANSFER_MODULE_NAME = \"shareTransfer\";\n\nclass ShareTransferModule implements IModule {\n  moduleName: string;\n\n  tbSDK: ITKeyApi;\n\n  currentEncKey: BN;\n\n  requestStatusCheckId: number;\n\n  requestStatusCheckInterval: number;\n\n  constructor() {\n    this.moduleName = SHARE_TRANSFER_MODULE_NAME;\n    this.requestStatusCheckInterval = 1000;\n  }\n\n  static refreshShareTransferMiddleware(\n    generalStore: unknown,\n    oldShareStores: ShareStoreMap,\n    newShareStores: ShareStoreMap\n  ): ShareTransferStorePointer {\n    const numberOfOldShares = Object.keys(oldShareStores).length;\n    const numberOfNewShares = Object.keys(newShareStores).length;\n\n    // This is needed to avoid MIM during share deletion.\n    if (numberOfNewShares <= numberOfOldShares) {\n      const shareTransferStorePointer: ShareTransferStorePointer = { pointer: new BN(generatePrivate()) };\n      return shareTransferStorePointer;\n    }\n\n    return generalStore as ShareTransferStorePointer;\n  }\n\n  setModuleReferences(tbSDK: ITKeyApi): void {\n    this.tbSDK = tbSDK;\n    this.tbSDK._addRefreshMiddleware(this.moduleName, ShareTransferModule.refreshShareTransferMiddleware);\n  }\n\n  setRequestStatusCheckInterval(interval: number): void {\n    this.requestStatusCheckInterval = interval;\n  }\n\n  async initialize(): Promise<void> {\n    const metadata = this.tbSDK.getMetadata();\n    const rawShareTransferStorePointer = metadata.getGeneralStoreDomain(this.moduleName) as ShareTransferStorePointerArgs;\n    let shareTransferStorePointer: ShareTransferStorePointer;\n    if (!rawShareTransferStorePointer) {\n      shareTransferStorePointer = { pointer: new BN(generatePrivate()) };\n      metadata.setGeneralStoreDomain(this.moduleName, shareTransferStorePointer);\n      // await this.tbSDK.syncShareMetadata(); // Requires threshold shares\n      // OPTIMIZATION TO NOT SYNC METADATA TWICE ON INIT, WILL FAIL IF TKEY DOES NOT HAVE MODULE AS DEFAULT\n    } else {\n      shareTransferStorePointer = new ShareTransferStorePointer(rawShareTransferStorePointer);\n    }\n  }\n\n  async requestNewShare(\n    userAgent: string,\n    availableShareIndexes: Array<string>,\n    callback?: (err?: ITkeyError, shareStore?: ShareStore) => void\n  ): Promise<string> {\n    if (this.currentEncKey) throw ShareTransferError.requestExists(`${this.currentEncKey.toString(\"hex\")}`);\n    this.currentEncKey = new BN(generatePrivate());\n    const [newShareTransferStore, userIp] = await Promise.all([this.getShareTransferStore(), getClientIp()]);\n    const encPubKeyX = getPubKeyPoint(this.currentEncKey).x.toString(\"hex\");\n    newShareTransferStore[encPubKeyX] = new ShareRequest({\n      encPubKey: getPubKeyECC(this.currentEncKey),\n      encShareInTransit: undefined,\n      availableShareIndexes,\n      userAgent,\n      userIp,\n      timestamp: Date.now(),\n    });\n    await this.setShareTransferStore(newShareTransferStore);\n    // watcher\n    if (callback) {\n      this.requestStatusCheckId = Number(\n        setInterval(async () => {\n          try {\n            const latestShareTransferStore = await this.getShareTransferStore();\n            if (!this.currentEncKey) throw ShareTransferError.missingEncryptionKey();\n            if (latestShareTransferStore[encPubKeyX].encShareInTransit) {\n              const shareStoreBuf = await decrypt(toPrivKeyECC(this.currentEncKey), latestShareTransferStore[encPubKeyX].encShareInTransit);\n              const receivedShare = ShareStore.fromJSON(JSON.parse(shareStoreBuf.toString()));\n              await this.tbSDK.inputShareStoreSafe(receivedShare, true);\n              this._cleanUpCurrentRequest();\n              callback(null, receivedShare);\n            } else if (!latestShareTransferStore[encPubKeyX]) {\n              this._cleanUpCurrentRequest();\n              callback(ShareTransferError.userCancelledRequest());\n            }\n          } catch (error) {\n            this._cleanUpCurrentRequest();\n            callback(error);\n          }\n        }, this.requestStatusCheckInterval)\n      );\n    }\n    return encPubKeyX;\n  }\n\n  async addCustomInfoToShareRequest(encPubKeyX: string, customInfo: string): Promise<void> {\n    const shareTransferStore = await this.getShareTransferStore();\n    if (!shareTransferStore[encPubKeyX]) throw ShareTransferError.missingEncryptionKey();\n    shareTransferStore[encPubKeyX].customInfo = customInfo;\n    await this.setShareTransferStore(shareTransferStore);\n  }\n\n  async lookForRequests(): Promise<Array<string>> {\n    const shareTransferStore = await this.getShareTransferStore();\n    return Object.keys(shareTransferStore);\n  }\n\n  async approveRequest(encPubKeyX: string, shareStore?: ShareStore): Promise<void> {\n    const shareTransferStore = await this.getShareTransferStore();\n    if (!shareTransferStore[encPubKeyX]) throw ShareTransferError.missingEncryptionKey();\n\n    let bufferedShare: Buffer;\n    if (shareStore) {\n      bufferedShare = Buffer.from(JSON.stringify(shareStore));\n    } else {\n      const store = new ShareRequest(shareTransferStore[encPubKeyX]);\n      const { availableShareIndexes } = store;\n      const metadata = this.tbSDK.getMetadata();\n      const latestPolynomial = metadata.getLatestPublicPolynomial();\n      const latestPolynomialId = latestPolynomial.getPolynomialID();\n      const indexes = metadata.getShareIndexesForPolynomial(latestPolynomialId);\n      const filtered = indexes.filter((el) => !availableShareIndexes.includes(el));\n      const share = this.tbSDK.outputShareStore(filtered[0]);\n      bufferedShare = Buffer.from(JSON.stringify(share));\n    }\n    const shareRequest = new ShareRequest(shareTransferStore[encPubKeyX]);\n    shareTransferStore[encPubKeyX].encShareInTransit = await encrypt(shareRequest.encPubKey, bufferedShare);\n    await this.setShareTransferStore(shareTransferStore);\n    this.currentEncKey = undefined;\n  }\n\n  async approveRequestWithShareIndex(encPubKeyX: string, shareIndex: string): Promise<void> {\n    const deviceShare = this.tbSDK.outputShareStore(shareIndex);\n    return this.approveRequest(encPubKeyX, deviceShare);\n  }\n\n  async getShareTransferStore(): Promise<ShareTransferStore> {\n    const metadata = this.tbSDK.getMetadata();\n    const shareTransferStorePointer = new ShareTransferStorePointer(metadata.getGeneralStoreDomain(this.moduleName) as ShareTransferStorePointerArgs);\n    const storageLayer = this.tbSDK.getStorageLayer();\n    return storageLayer.getMetadata<ShareTransferStore>({ privKey: shareTransferStorePointer.pointer });\n  }\n\n  async setShareTransferStore(shareTransferStore: ShareTransferStore): Promise<void> {\n    const metadata = this.tbSDK.getMetadata();\n    const shareTransferStorePointer = new ShareTransferStorePointer(metadata.getGeneralStoreDomain(this.moduleName) as ShareTransferStorePointerArgs);\n    const storageLayer = this.tbSDK.getStorageLayer();\n    await storageLayer.setMetadata({ input: shareTransferStore, privKey: shareTransferStorePointer.pointer });\n  }\n\n  async startRequestStatusCheck(encPubKeyX: string, deleteRequestAfterCompletion: boolean): Promise<ShareStore> {\n    // watcher\n    return new Promise((resolve, reject) => {\n      this.requestStatusCheckId = Number(\n        setInterval(async () => {\n          try {\n            const latestShareTransferStore = await this.getShareTransferStore();\n            if (!this.currentEncKey) throw ShareTransferError.missingEncryptionKey();\n            if (!latestShareTransferStore[encPubKeyX]) {\n              this._cleanUpCurrentRequest();\n              reject(ShareTransferError.userCancelledRequest());\n            } else if (latestShareTransferStore[encPubKeyX].encShareInTransit) {\n              const shareStoreBuf = await decrypt(toPrivKeyECC(this.currentEncKey), latestShareTransferStore[encPubKeyX].encShareInTransit);\n              const receivedShare = ShareStore.fromJSON(JSON.parse(shareStoreBuf.toString()));\n              await this.tbSDK.inputShareStoreSafe(receivedShare, true);\n              if (deleteRequestAfterCompletion) {\n                await this.deleteShareTransferStore(encPubKeyX);\n              }\n              this._cleanUpCurrentRequest();\n              resolve(receivedShare);\n            }\n          } catch (err) {\n            this._cleanUpCurrentRequest();\n            reject(err);\n          }\n        }, this.requestStatusCheckInterval)\n      );\n    });\n  }\n\n  async cancelRequestStatusCheck(): Promise<void> {\n    clearInterval(this.requestStatusCheckId);\n  }\n\n  async deleteShareTransferStore(encPubKey: string): Promise<void> {\n    const currentShareTransferStore = await this.getShareTransferStore();\n    delete currentShareTransferStore[encPubKey];\n    await this.setShareTransferStore(currentShareTransferStore);\n  }\n\n  async resetShareTransferStore(): Promise<void> {\n    const metadata = this.tbSDK.getMetadata();\n    const shareTransferStorePointer = { pointer: new BN(generatePrivate()) };\n    metadata.setGeneralStoreDomain(this.moduleName, shareTransferStorePointer);\n    await this.tbSDK._syncShareMetadata();\n  }\n\n  private _cleanUpCurrentRequest(): void {\n    this.currentEncKey = undefined;\n    clearInterval(this.requestStatusCheckId);\n  }\n}\n\nexport default ShareTransferModule;\n","export { default as ShareTransferError } from \"./errors\";\nexport { default as ShareRequest } from \"./ShareRequest\";\nexport { default, default as ShareTransferModule } from \"./ShareTransferModule\";\nexport * from \"./ShareTransferModule\";\nexport { default as ShareTransferStorePointer } from \"./ShareTransferStorePointer\";\n"],"names":["TkeyError","ShareTransferError","code","message","Object","defineProperty","value","extraMessage","messages","fromCode","ShareRequest","encPubKey","encShareInTransit","availableShareIndexes","userAgent","userIp","timestamp","testEncPubKey","type","Buffer","from","data","BN","ShareTransferStorePointer","pointer","promiseTimeout","getClientIp","fetch","then","response","ok","text","decrypt","encrypt","getPubKeyECC","getPubKeyPoint","ShareStore","toPrivKeyECC","generatePrivate","SHARE_TRANSFER_MODULE_NAME","ShareTransferModule","moduleName","requestStatusCheckInterval","tbSDK","_addRefreshMiddleware","refreshShareTransferMiddleware","interval","metadata","getMetadata","rawShareTransferStorePointer","getGeneralStoreDomain","shareTransferStorePointer","setGeneralStoreDomain","callback","currentEncKey","requestExists","toString","Promise","all","getShareTransferStore","newShareTransferStore","encPubKeyX","x","undefined","Date","now","setShareTransferStore","requestStatusCheckId","Number","setInterval","latestShareTransferStore","missingEncryptionKey","shareStoreBuf","receivedShare","fromJSON","JSON","parse","inputShareStoreSafe","_cleanUpCurrentRequest","userCancelledRequest","customInfo","shareTransferStore","keys","shareStore","bufferedShare","stringify","store","latestPolynomial","getLatestPublicPolynomial","latestPolynomialId","getPolynomialID","indexes","getShareIndexesForPolynomial","filtered","filter","el","includes","share","outputShareStore","shareRequest","shareIndex","deviceShare","approveRequest","storageLayer","getStorageLayer","privKey","setMetadata","input","deleteRequestAfterCompletion","resolve","reject","deleteShareTransferStore","clearInterval","currentShareTransferStore","_syncShareMetadata","generalStore","oldShareStores","newShareStores","numberOfOldShares","length","numberOfNewShares","default"],"sourceRoot":""}